{
  "api/idc.utility/IDX.Utilities.Common.JsonFileReader.html": {
    "href": "api/idc.utility/IDX.Utilities.Common.JsonFileReader.html",
    "title": "Method JsonFileReader | Back End Documentations",
    "keywords": "Method JsonFileReader JsonFileReader<T>(string, string) Reads a JSON file and returns a value of type T. Declaration public static T? JsonFileReader<T>(string filePath, string propertyName) Parameters Type Name Description string filePath The path of the JSON file to read from. string propertyName The name of the property to retrieve. Returns Type Description T The value of the property, or the default value of T if the property is not found or the value cannot be converted. Type Parameters Name Description T The type of the value to retrieve. Examples var value = Common.JsonFileReader<int>(\"example.json\", \"id\"); Console.WriteLine(value); // Output: 123 Exceptions Type Condition ArgumentNullException Thrown if filePath or propertyName is null."
  },
  "api/idc.utility/IDX.Utilities.Common.html": {
    "href": "api/idc.utility/IDX.Utilities.Common.html",
    "title": "Class Common | Back End Documentations",
    "keywords": "Class Common Provides common utility methods. Inheritance object Common Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities Assembly: IDX.Utilities.dll Syntax public static class Common Examples var json = File.ReadAllText(\"example.json\"); var value = Common.JsonFileReader<int>(\"example.json\", \"id\"); Console.WriteLine(value); // Output: 123 Methods Name Description JsonFileReader<T>(string, string) Reads a JSON file and returns a value of type T."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.-ctor.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.-ctor.html",
    "title": "Constructor CouchBaseHelper | Back End Documentations",
    "keywords": "Constructor CouchBaseHelper CouchBaseHelper(string?, string?, string?, string?, byte[]?) Initializes a new instance of the CouchBaseHelper class. Declaration public CouchBaseHelper(string? host, string? username, string? password, string? encryptionKey = null, byte[]? encryptionSalts = null) Parameters Type Name Description string host The Couchbase host name. string username The Couchbase username. string password The Couchbase password. string encryptionKey The encryption key for decrypting the password. Optional. byte[] encryptionSalts The encryption salts for decrypting the password. Optional. Examples using cbh = new CouchBaseHelper(\"localhost\", \"Administrator\", \"password\", \"my secret key\", new byte[] { 0x01, 0x02 }); CouchBaseHelper(CouchBaseConnectionString, string?, byte[]?) Initializes a new instance of the CouchBaseHelper class. Declaration public CouchBaseHelper(CouchBaseConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts) Parameters Type Name Description CouchBaseConnectionString connectionString The Couchbase connection string. string encryptionKey The encryption key for decrypting the password. Optional. byte[] encryptionSalts The encryption salts for decrypting the password. Optional. Examples var connectionString = new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }; using cbh = new CouchBaseHelper(connectionString, \"my secret key\", new byte[] { 0x01, 0x02 });"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ConnectAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ConnectAsync.html",
    "title": "Method ConnectAsync | Back End Documentations",
    "keywords": "Method ConnectAsync ConnectAsync(CommonCallback) Connects to the Couchbase server asynchronously. Declaration public virtual Task<CouchBaseHelper> ConnectAsync(CommonCallback callback) Parameters Type Name Description CommonCallback callback The callback function to execute after the connection is established. Returns Type Description Task<CouchBaseHelper> The CouchBaseHelper object. Examples using cbh = new CouchBaseHelper(new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }); await cbh.ConnectAsync( () => { Console.WriteLine(\"Connected to Couchbase.\"); } );"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.Dispose.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.Dispose.html",
    "title": "Method Dispose | Back End Documentations",
    "keywords": "Method Dispose Dispose(bool) Releases unmanaged and - optionally - managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Examples using var cbh = new CouchBaseHelper(\"couchbase://localhost\", \"Administrator\", \"password\"); // use the CouchBaseHelper instance Dispose() Releases unmanaged and - optionally - managed resources. Declaration public void Dispose() Implements IDisposable.Dispose() Examples var cbh = new CouchBaseHelper(\"couchbase://localhost\", \"Administrator\", \"password\"); try { // use the CouchBaseHelper instance } finally { cbh.Dispose(); }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.DisposeAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.DisposeAsync.html",
    "title": "Method DisposeAsync | Back End Documentations",
    "keywords": "Method DisposeAsync DisposeAsync() Releases unmanaged and - optionally - managed resources asynchronously. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask Implements IAsyncDisposable.DisposeAsync() Examples var cbh = new CouchBaseHelper(\"couchbase://localhost\", \"Administrator\", \"password\"); try { // use the CouchBaseHelper instance } finally { await cbh.DisposeAsync(); }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ExecuteNonQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ExecuteNonQuery.html",
    "title": "Method ExecuteNonQuery | Back End Documentations",
    "keywords": "Method ExecuteNonQuery ExecuteNonQuery(string, CallbackExecuteNonQuery) Executes a query asynchronously and invokes the provided callback with the query result. Declaration public virtual Task<CouchBaseHelper> ExecuteNonQuery(string query, CallbackExecuteNonQuery callback) Parameters Type Name Description string query The query to execute. CallbackExecuteNonQuery callback The callback function to be invoked with the query result. Returns Type Description Task<CouchBaseHelper> The modified CouchBaseHelper object. Examples using cbh = new CouchBaseHelper(new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }); await cbh.ConnectAsync( () => { Console.WriteLine(\"Connected to Couchbase.\"); } ); await cbh.ExecuteNonQuery( \"DELETE FROM `travel-sample` WHERE type = 'hotel'\", (result) => { Console.WriteLine($\"Deleted {result} documents from travel-sample bucket.\"); } ); Exceptions Type Condition InvalidOperationException Thrown if the connection is not established."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ExecuteQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ExecuteQuery.html",
    "title": "Method ExecuteQuery | Back End Documentations",
    "keywords": "Method ExecuteQuery ExecuteQuery(string, CallbackExecuteQuery) Executes a query asynchronously and invokes the provided callback with the result. Declaration public virtual Task<CouchBaseHelper> ExecuteQuery(string query, CallbackExecuteQuery callback) Parameters Type Name Description string query The query to execute. CallbackExecuteQuery callback The callback function to be invoked with the query result. Returns Type Description Task<CouchBaseHelper> The CouchBaseHelper object. Examples using cbh = new CouchBaseHelper(new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }); await cbh.ConnectAsync( () => { Console.WriteLine(\"Connected to Couchbase.\"); } ); await cbh.ExecuteQuery( \"SELECT * FROM `travel-sample` LIMIT 10\", (result) => { foreach (var row in result) { Console.WriteLine(row); } } ); Exceptions Type Condition InvalidOperationException Thrown if the connection is not established."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ExecuteScalar.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ExecuteScalar.html",
    "title": "Method ExecuteScalar | Back End Documentations",
    "keywords": "Method ExecuteScalar ExecuteScalar<T>(string, CallbackExecuteScalar<T>) Executes a query asynchronously and returns a scalar result. Declaration public virtual Task<CouchBaseHelper> ExecuteScalar<T>(string query, CallbackExecuteScalar<T> callback) Parameters Type Name Description string query The query to execute. CallbackExecuteScalar<T> callback The callback function to be invoked with the query result. Returns Type Description Task<CouchBaseHelper> The modified CouchBaseHelper object. Type Parameters Name Description T The type of the scalar result. Examples using cbh = new CouchBaseHelper(new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }); await cbh.ConnectAsync( () => { Console.WriteLine(\"Connected to Couchbase.\"); } ); await cbh.ExecuteScalar<int>( \"SELECT COUNT(*) FROM `travel-sample`\", (result) => { Console.WriteLine($\"Found {result} documents in travel-sample bucket.\"); } ); Exceptions Type Condition InvalidOperationException Thrown if the connection is not established."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.IsConnected.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.IsConnected.html",
    "title": "Property IsConnected | Back End Documentations",
    "keywords": "Property IsConnected IsConnected Declaration public bool IsConnected { get; } Property Value Type Description bool"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ValidateQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.ValidateQuery.html",
    "title": "Method ValidateQuery | Back End Documentations",
    "keywords": "Method ValidateQuery ValidateQuery(string, CallbackValidateQuery) Validates a query for CouchBase. Declaration public virtual Task<CouchBaseHelper> ValidateQuery(string query, CallbackValidateQuery callback) Parameters Type Name Description string query The query to validate. CallbackValidateQuery callback The callback function to execute after validation. Returns Type Description Task<CouchBaseHelper> The CouchBaseHelper object. Examples using cbh = new CouchBaseHelper(new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }); await cbh.ConnectAsync( () => { Console.WriteLine(\"Connected to Couchbase.\"); } ); await cbh.ValidateQuery( \"SELECT * FROM `travel-sample` LIMIT 10\", (result) => { Console.WriteLine(result); } ); Exceptions Type Condition InvalidOperationException Thrown if the connection is not established."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.CouchBaseHelper.html",
    "title": "Class CouchBaseHelper | Back End Documentations",
    "keywords": "Class CouchBaseHelper Provides a helper class for interacting with a Couchbase server. Inheritance object CouchBaseHelper Implements IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.DataProcessor Assembly: IDX.Utilities.dll Syntax public class CouchBaseHelper : IDisposable, IAsyncDisposable Examples using var cbh = new CouchBaseHelper(\"couchbase://localhost\", \"Administrator\", \"password\"); await cbh.ConnectAsync(() => { }); var result = await cbh.ExecuteQuery(\"select * from `travel-sample` limit 10\", rows => { foreach (var row in rows) { Console.WriteLine(row); } }); await cbh.DisposeAsync(); Constructors Name Description CouchBaseHelper(CouchBaseConnectionString, string?, byte[]?) Initializes a new instance of the CouchBaseHelper class. CouchBaseHelper(string?, string?, string?, string?, byte[]?) Initializes a new instance of the CouchBaseHelper class. Properties Name Description IsConnected Methods Name Description ConnectAsync(CommonCallback) Connects to the Couchbase server asynchronously. Dispose() Releases unmanaged and - optionally - managed resources. Dispose(bool) Releases unmanaged and - optionally - managed resources. DisposeAsync() Releases unmanaged and - optionally - managed resources asynchronously. ExecuteNonQuery(string, CallbackExecuteNonQuery) Executes a query asynchronously and invokes the provided callback with the query result. ExecuteQuery(string, CallbackExecuteQuery) Executes a query asynchronously and invokes the provided callback with the result. ExecuteScalar<T>(string, CallbackExecuteScalar<T>) Executes a query asynchronously and returns a scalar result. ValidateQuery(string, CallbackValidateQuery) Validates a query for CouchBase. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.-ctor.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.-ctor.html",
    "title": "Constructor PgSqlHelper | Back End Documentations",
    "keywords": "Constructor PgSqlHelper PgSqlHelper() Declaration public PgSqlHelper() PgSqlHelper(string) Initializes a new instance of the PgSqlDataProcessor class. Declaration public PgSqlHelper(string connectionString) Parameters Type Name Description string connectionString The connection string for the PostgreSQL database. Examples using var helper = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); var result = await helper.ExecuteQuery(\"SELECT * FROM mytable\"); PgSqlHelper(ConStringFromJson) Initializes a new instance of the PgSqlDataProcessor class. Declaration public PgSqlHelper(PgSqlHelper.ConStringFromJson options) Parameters Type Name Description PgSqlHelper.ConStringFromJson options Examples var options = new ConStringFromJson { JsonFilePath = \"path/to/config.json\", ConfigName = \"pgconn\", PassName = \"password\", EncryptionKey = \"my secret key\", EncryptionSalts = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 } }; using var helper = new PgSqlHelper(options); var result = await helper.ExecuteQuery(\"SELECT * FROM mytable\"); Exceptions Type Condition Exception Thrown when the jsonFilePath, configName, or passName is null or whitespace. PgSqlHelper(CommonConnectionString, string?, byte[]?) Initializes a new instance of the PgSqlHelper class with the specified connection string, encryption key, and encryption salts. Declaration public PgSqlHelper(CommonConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts) Parameters Type Name Description CommonConnectionString connectionString The connection string to the PostgreSQL database. string encryptionKey The encryption key used to decrypt the password in the connection string. byte[] encryptionSalts The encryption salts used in the encryption process. Examples var constring = new CommonConnectionString { Username = \"myuser\", Password = \"enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; using var helper = new PgSqlHelper( connectionString: constring, encryptionKey: \"mysecretkey\", encryptionSalts: new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 } ); var result = await helper.ExecuteQuery(\"SELECT * FROM mytable\");"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.BsTableData.html",
    "title": "Method BsTableData | Back End Documentations",
    "keywords": "Method BsTableData BsTableData(PagingRequest, out BTResponse<List<dynamic>?>) Retrieves table data based on the provided paging request and calls the specified callback with the result. Declaration public virtual PgSqlHelper BsTableData(PagingRequest pagingRequest, out BTResponse<List<dynamic>?> result) Parameters Type Name Description PagingRequest pagingRequest The paging request object. BTResponse<List<dynamic>> result The result of the query. Returns Type Description PgSqlHelper The current instance of PgSqlHelper. Examples var pagingRequest = new PagingRequest { BTRequest = new BTRequest { Page = 1, Limit = 10, Sort = \"id\", Order = BTRequest.BTOrderType.Asc }, Fields = new[] { \"id\", \"name\", \"age\" }, WhereClause = \"age > 18\", Source = PagingRequest.SourceType.Table }; var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); helper.BsTableData(pagingRequest, out var result); foreach (var row in result.Rows) { Console.WriteLine(row); }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.BsTableDataAsync.html",
    "title": "Method BsTableDataAsync | Back End Documentations",
    "keywords": "Method BsTableDataAsync BsTableDataAsync(PagingRequest, CallbackBTData, CancellationToken) Retrieves table data based on the provided paging request and calls the specified callback with the result. Declaration public virtual Task<PgSqlHelper> BsTableDataAsync(PagingRequest pagingRequest, CallbackBTData callback, CancellationToken cancellationToken = default) Parameters Type Name Description PagingRequest pagingRequest The paging request object. CallbackBTData callback The callback function to process the result. CancellationToken cancellationToken The cancellation token. Returns Type Description Task<PgSqlHelper> The current instance of PgSqlHelper. Examples var pagingRequest = new PagingRequest { BTRequest = new BTRequest { Page = 1, Limit = 10, Sort = \"id\", Order = BTRequest.BTOrderType.Asc }, Fields = new[] { \"id\", \"name\", \"age\" }, WhereClause = \"age > 18\", Source = PagingRequest.SourceType.Table }; var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.BsTableDataAsync( pagingRequest, (result) => { foreach (var row in result.Rows) { Console.WriteLine(row); } } );"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDB.html",
    "title": "Method ChangeDB | Back End Documentations",
    "keywords": "Method ChangeDB ChangeDB(string?, bool) Changes the database of the PgSqlHelper instance. Declaration public virtual PgSqlHelper ChangeDB(string? dbName, bool useTransaction = false) Parameters Type Name Description string dbName The name of the database to switch to. bool useTransaction Optional. Indicates whether to use a transaction after changing the database. Default is false. Returns Type Description PgSqlHelper The modified PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); db.ChangeDB(\"myotherdb\", useTransaction: true); Exceptions Type Condition ArgumentNullException Thrown if dbName is null or whitespace."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ChangeDBAsync.html",
    "title": "Method ChangeDBAsync | Back End Documentations",
    "keywords": "Method ChangeDBAsync ChangeDBAsync(string?, bool, CancellationToken) Changes the database connection to the specified database. Declaration public virtual Task<PgSqlHelper> ChangeDBAsync(string? dbName, bool useTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description string dbName The name of the database to connect to. bool useTransaction Whether to use a transaction for the connection. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The updated PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ChangeDBAsync(\"myotherdb\", useTransaction: true); Exceptions Type Condition ArgumentNullException Thrown when dbName is null or whitespace. ChangeDBAsync(Task, string?, bool, CancellationToken) Changes the database connection asynchronously. Declaration public virtual Task<PgSqlHelper> ChangeDBAsync(Task callback, string? dbName, bool useTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description Task callback The action to be executed after the database connection is changed. string dbName The name of the database to be connected to. bool useTransaction Indicates whether to use a transaction for the database connection. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ChangeDBAsync( async () => { Console.WriteLine(\"Connected to the database.\"); }, \"myotherdb\", useTransaction: true ); Exceptions Type Condition ArgumentNullException Thrown when callback is null. ChangeDBAsync(Action, string?, bool, CancellationToken) Changes the database connection asynchronously. Declaration public virtual Task<PgSqlHelper> ChangeDBAsync(Action callback, string? dbName, bool useTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description Action callback The action to be executed after the database connection is changed. string dbName The name of the database to be connected to. bool useTransaction Indicates whether to use a transaction for the database connection. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ChangeDBAsync( () => { Console.WriteLine(\"Connected to the database.\"); }, \"myotherdb\", useTransaction: true ); Exceptions Type Condition ArgumentNullException Thrown when callback is null."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Commit.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Commit.html",
    "title": "Method Commit | Back End Documentations",
    "keywords": "Method Commit Commit(bool) Commits the current transaction and restarts it if specified. Declaration public virtual PgSqlHelper Commit(bool restartTransaction = false) Parameters Type Name Description bool restartTransaction Whether to restart the transaction after commit. Returns Type Description PgSqlHelper The PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); await db.Commit(restartTransaction: true); await db.ExecuteQuery(\"insert into mytable (name) values ('Jane Doe')\"); await db.Commit(); await db.RollbackAsync(); } catch (Exception ex) { await db.RollbackAsync(); throw; } Exceptions Type Condition InvalidOperationException Thrown if the connection is not open."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.CommitAsync.html",
    "title": "Method CommitAsync | Back End Documentations",
    "keywords": "Method CommitAsync CommitAsync(bool, CancellationToken) Commits the current transaction and optionally restarts the transaction. Declaration public virtual Task<PgSqlHelper> CommitAsync(bool restartTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description bool restartTransaction Indicates whether to restart the transaction after commit. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); await db.CommitAsync(restartTransaction: true); await db.ExecuteQuery(\"insert into mytable (name) values ('Jane Doe')\"); await db.CommitAsync(); await db.RollbackAsync(); } catch (Exception ex) { await db.RollbackAsync(); throw; } Exceptions Type Condition InvalidOperationException Thrown if the connection is not established. CommitAsync(Action, bool, CancellationToken) Commits the current transaction and executes a callback action asynchronously. Declaration public virtual Task<PgSqlHelper> CommitAsync(Action callback, bool restartTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description Action callback The callback action to be executed. bool restartTransaction Whether to restart the transaction after commit. Default is false. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The updated PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); await db.CommitAsync( () => { Console.WriteLine(\"Committed transaction.\"); }, restartTransaction: true ); await db.ExecuteQuery(\"insert into mytable (name) values ('Jane Doe')\"); await db.CommitAsync(); await db.RollbackAsync(); } catch (Exception ex) { await db.RollbackAsync(); throw; }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.ConfigName.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.ConfigName.html",
    "title": "Property ConfigName | Back End Documentations",
    "keywords": "Property ConfigName ConfigName Gets or sets the name of the configuration in the JSON file. Declaration public string? ConfigName { get; set; } Property Value Type Description string"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.EncryptionKey.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.EncryptionKey.html",
    "title": "Property EncryptionKey | Back End Documentations",
    "keywords": "Property EncryptionKey EncryptionKey Gets or sets the encryption key used to decrypt the password. Declaration public string? EncryptionKey { get; set; } Property Value Type Description string"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.EncryptionSalts.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.EncryptionSalts.html",
    "title": "Property EncryptionSalts | Back End Documentations",
    "keywords": "Property EncryptionSalts EncryptionSalts Gets or sets the encryption salts used to decrypt the password. Declaration public string? EncryptionSalts { get; set; } Property Value Type Description string"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.JsonFilePath.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.JsonFilePath.html",
    "title": "Property JsonFilePath | Back End Documentations",
    "keywords": "Property JsonFilePath JsonFilePath Gets or sets the path to the JSON file containing the connection string. Declaration public string? JsonFilePath { get; set; } Property Value Type Description string"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.PassName.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.PassName.html",
    "title": "Property PassName | Back End Documentations",
    "keywords": "Property PassName PassName Gets or sets the name of the password property in the JSON file. Declaration public string? PassName { get; set; } Property Value Type Description string"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConStringFromJson.html",
    "title": "Class PgSqlHelper.ConStringFromJson | Back End Documentations",
    "keywords": "Class PgSqlHelper.ConStringFromJson Represents the connection string options when connecting to a PostgreSQL database using a JSON file. Inheritance object PgSqlHelper.ConStringFromJson Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.DataProcessor Assembly: IDX.Utilities.dll Syntax public class PgSqlHelper.ConStringFromJson Examples { \"JsonFilePath\": \"path/to/config.json\", \"ConfigName\": \"pgconn\", \"PassName\": \"password\", \"EncryptionKey\": \"my secret key\", \"EncryptionSalts\": \"my secret salts\" } Properties Name Description ConfigName Gets or sets the name of the configuration in the JSON file. EncryptionKey Gets or sets the encryption key used to decrypt the password. EncryptionSalts Gets or sets the encryption salts used to decrypt the password. JsonFilePath Gets or sets the path to the JSON file containing the connection string. PassName Gets or sets the name of the password property in the JSON file. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Connect.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Connect.html",
    "title": "Method Connect | Back End Documentations",
    "keywords": "Method Connect Connect(bool, bool) Connects to the PostgreSQL database. Declaration public virtual PgSqlHelper Connect(bool useTransaction = false, bool disconnectFirst = false) Parameters Type Name Description bool useTransaction Specifies whether to use a transaction. bool disconnectFirst Specifies whether to disconnect first before connecting. Returns Type Description PgSqlHelper A PgSqlHelper instance representing the connection. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); helper.Connect(); Connect(string, bool, bool) Connects to a PostgreSQL database using the provided connection string. Declaration public virtual PgSqlHelper Connect(string connectionString, bool useTransaction = false, bool disconnectFirst = false) Parameters Type Name Description string connectionString The connection string to use for the database connection. bool useTransaction Flag indicating whether to use a transaction for the connection (default: false). bool disconnectFirst Flag indicating whether to disconnect from any existing connection before connecting (default: false). Returns Type Description PgSqlHelper A PgSqlHelper instance representing the connected database. Examples using var helper = new PgSqlHelper(); helper.Connect(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); Connect(CommonConnectionString, string?, byte[]?, bool, bool) Connects to the Postgres database using the provided connection string, encryption key, and salts. Declaration public virtual PgSqlHelper Connect(CommonConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts, bool useTransaction = false, bool disconnectFirst = false) Parameters Type Name Description CommonConnectionString connectionString The common connection string. string encryptionKey The encryption key. byte[] encryptionSalts The encryption salts. bool useTransaction Optional. Indicates whether to use a transaction. Default is false. bool disconnectFirst Optional. Indicates whether to disconnect first before connecting. Default is false. Returns Type Description PgSqlHelper The PgSqlHelper instance representing the connection to the database. Examples using var helper = new PgSqlHelper(); var constring = new CommonConnectionString { Username = \"myuser\", Password = \"enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; helper.Connect( connectionString: constring, encryptionKey: \"mysecretkey\", encryptionSalts: new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 }, useTransaction: true, disconnectFirst: true ); Connect(ConStringFromJson, bool, bool) Connects to the PgSql database. Declaration public virtual PgSqlHelper Connect(PgSqlHelper.ConStringFromJson options, bool useTransaction = false, bool disconnectFirst = false) Parameters Type Name Description PgSqlHelper.ConStringFromJson options The connection string options. bool useTransaction Optional. Specifies whether to use a transaction. bool disconnectFirst Optional. Specifies whether to disconnect from the database before connecting. Returns Type Description PgSqlHelper The PgSqlHelper instance. Examples using var helper = new PgSqlHelper(); var options = new ConStringFromJson { Host = \"localhost\", Username = \"myuser\", Password = \"enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=\", Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; helper.Connect(options: options, useTransaction: true, disconnectFirst: true);"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ConnectAsync.html",
    "title": "Method ConnectAsync | Back End Documentations",
    "keywords": "Method ConnectAsync ConnectAsync(Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. Declaration public virtual Task<PgSqlHelper> ConnectAsync(Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default) Parameters Type Name Description Action callback The callback action to be executed after connecting. bool useTransaction Indicates whether to use a transaction during the connection. bool disconnectFirst Indicates whether to disconnect the current connection before connecting. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Examples using var helper = new PgSqlHelper(); await helper.ConnectAsync( () => { Console.WriteLine(\"Connected to the database.\"); }, useTransaction: true ); ConnectAsync(string, Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. Declaration public virtual Task<PgSqlHelper> ConnectAsync(string connectionString, Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default) Parameters Type Name Description string connectionString The connection string for the database. Action callback An optional callback to run after connecting to the database. bool useTransaction Specifies whether to use a transaction during the connection. bool disconnectFirst Specifies whether to disconnect from the database before connecting. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> A task representing the asynchronous operation. Examples using var helper = new PgSqlHelper(); await helper.ConnectAsync( \"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\", () => { Console.WriteLine(\"Connected to the database.\"); }, useTransaction: true ); ConnectAsync(CommonConnectionString, string?, byte[]?, Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. Declaration public virtual Task<PgSqlHelper> ConnectAsync(CommonConnectionString connectionString, string? encryptionKey, byte[]? encryptionSalts, Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default) Parameters Type Name Description CommonConnectionString connectionString The connection string. string encryptionKey The encryption key. byte[] encryptionSalts The encryption salts. Action callback The callback to execute after connecting. bool useTransaction Whether to use a transaction. bool disconnectFirst Whether to disconnect first before connecting. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> A Task<TResult> representing the asynchronous operation. Examples using var helper = new PgSqlHelper(); await helper.ConnectAsync( new CommonConnectionString { Server = \"localhost\", Database = \"mydatabase\", Username = \"myuser\", Password = \"mypass\" }, \"my secret key\", new byte[] { 0x01, 0x02, 0x03, 0x04 }, () => { Console.WriteLine(\"Connected to the database.\"); }, useTransaction: true ); ConnectAsync(ConStringFromJson, Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. Declaration public virtual Task<PgSqlHelper> ConnectAsync(PgSqlHelper.ConStringFromJson options, Action? callback = null, bool useTransaction = false, bool disconnectFirst = false, CancellationToken cancellationToken = default) Parameters Type Name Description PgSqlHelper.ConStringFromJson options The connection string options. Action callback An optional callback to be executed after the connection is established. bool useTransaction A flag indicating whether to use a transaction. bool disconnectFirst A flag indicating whether to disconnect from the database first before connecting. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Examples using var db = new PgSqlHelper(); var options = new ConStringFromJson { Host = \"localhost\", Port = 5432, Username = \"myuser\", Password = \"mypass\", Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; await db.ConnectAsync( options, () => { Console.WriteLine(\"Connected to the database.\"); }, useTransaction: true, disconnectFirst: true ); Exceptions Type Condition ArgumentException Thrown when options is null or empty."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Disconnect.html",
    "title": "Method Disconnect | Back End Documentations",
    "keywords": "Method Disconnect Disconnect(bool) Disconnects from the PostgreSQL database. Declaration public virtual PgSqlHelper Disconnect(bool commitTrans = false) Parameters Type Name Description bool commitTrans Optional. Specifies whether to commit the current transaction before disconnecting. Defaults to false. Returns Type Description PgSqlHelper The current instance of the PgSqlHelper class. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); var result = await helper.ExecuteQuery(\"SELECT * FROM mytable\"); helper.Disconnect();"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DisconnectAsync.html",
    "title": "Method DisconnectAsync | Back End Documentations",
    "keywords": "Method DisconnectAsync DisconnectAsync(bool, CancellationToken) Disconnects from the PostgreSQL database. Declaration public virtual Task<PgSqlHelper> DisconnectAsync(bool commitTrans = false, CancellationToken cancellationToken = default) Parameters Type Name Description bool commitTrans Specifies whether to commit the current transaction before disconnecting. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> A Task representing the asynchronous operation. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); var result = await helper.ExecuteQuery(\"SELECT * FROM mytable\"); await helper.DisconnectAsync(); Exceptions Type Condition NpgsqlException Thrown if an error occurs while committing or rolling back the transaction. DisconnectAsync(Action, bool, CancellationToken) Disconnects from the PostgreSQL server and executes the specified callback asynchronously. Declaration public virtual Task<PgSqlHelper> DisconnectAsync(Action callback, bool commitTrans = false, CancellationToken cancellationToken = default) Parameters Type Name Description Action callback The callback action to be executed after disconnecting. bool commitTrans Specifies whether to commit the current transaction before disconnecting. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The current instance of PgSqlHelper. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); await helper.DisconnectAsync( () => { Console.WriteLine(\"Disconnected from PostgreSQL.\"); }, false );"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Dispose.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Dispose.html",
    "title": "Method Dispose | Back End Documentations",
    "keywords": "Method Dispose Dispose() Performs the necessary cleanup operations. using (var db = new PgSqlHelper()) { db.Dispose(); } Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(bool) Disposes of the resources used by the object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing True if called from Dispose(), false if called from the finalizer. Examples using (var db = new PgSqlHelper()) { db.Dispose(disposing: true); }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsync.html",
    "title": "Method DisposeAsync | Back End Documentations",
    "keywords": "Method DisposeAsync DisposeAsync() Asynchronously performs the necessary cleanup operations. Declaration public ValueTask DisposeAsync() Returns Type Description ValueTask Implements IAsyncDisposable.DisposeAsync() Examples using var db = new PgSqlHelper(); await db.DisposeAsync();"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DisposeAsyncCore.html",
    "title": "Method DisposeAsyncCore | Back End Documentations",
    "keywords": "Method DisposeAsyncCore DisposeAsyncCore() Disposes of the resources used by the object asynchronously. Declaration protected virtual ValueTask DisposeAsyncCore() Returns Type Description ValueTask A task that represents the asynchronous dispose operation. Examples using var db = new PgSqlHelper(); await db.DisposeAsyncCore();"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Done.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Done.html",
    "title": "Method Done | Back End Documentations",
    "keywords": "Method Done Done(bool) Marks the operation as completed and performs necessary cleanup. Declaration public virtual void Done(bool commitTransaction = false) Parameters Type Name Description bool commitTransaction Indicates whether to commit any pending transaction. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); db.Done(); } catch (Exception ex) { db.Done(false); throw; }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.DoneAsync.html",
    "title": "Method DoneAsync | Back End Documentations",
    "keywords": "Method DoneAsync DoneAsync(Action, bool, CancellationToken) Executes the provided callback and optionally commits the transaction. Declaration public virtual Task DoneAsync(Action callback, bool commitTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description Action callback The action to execute. bool commitTransaction Indicates whether to commit the transaction. CancellationToken cancellationToken Returns Type Description Task A task representing the asynchronous operation. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); await db.DoneAsync( () => { Console.WriteLine(\"Committed transaction.\"); }, commitTransaction: true ); } catch (Exception ex) { await db.DoneAsync( () => { Console.WriteLine(\"Transaction rolled back.\"); }, commitTransaction: false ); throw; }"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQuery.html",
    "title": "Method ExecuteNonQuery | Back End Documentations",
    "keywords": "Method ExecuteNonQuery ExecuteNonQuery(SPCallInfo, out int) Executes a non-query stored procedure call and returns the updated PgSqlHelper instance. Declaration public virtual PgSqlHelper ExecuteNonQuery(SPCallInfo spCallInfo, out int result) Parameters Type Name Description SPCallInfo spCallInfo The stored procedure call information. int result The number of rows affected by the query. Returns Type Description PgSqlHelper The updated PgSqlHelper instance. Examples var spCallInfo = new SPCallInfo { ProcedureName = \"InsertEmployee\", Parameters = new List<SPParameter> { new SPCallInfo.SPCallInfoParameter { ParameterName = \"@name\", DbType = NpgsqlDbType.Varchar, Value = \"John Doe\" } } }; int? result; await helper.ExecuteQuery(spCallInfo, out result); Console.WriteLine($\"Result: {result?.ToString() ?? \"null\"}\"); Exceptions Type Condition InvalidOperationException Thrown if the connection is not open. ExecuteNonQuery(string, out int) Executes a non-query SQL statement and returns the modified row count. Declaration public virtual PgSqlHelper ExecuteNonQuery(string query, out int result) Parameters Type Name Description string query The SQL statement to execute. int result The number of rows affected by the SQL statement. Returns Type Description PgSqlHelper The current instance of the PgSqlHelper. Examples string query = \"DELETE FROM mytable WHERE id = 1\"; int? result; await helper.ExecuteQuery(query, out result); Console.WriteLine($\"Deleted {result?.ToString() ?? \"null\"} rows.\"); Exceptions Type Condition ArgumentNullException Thrown when the query is null or whitespace."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteNonQueryAsync.html",
    "title": "Method ExecuteNonQueryAsync | Back End Documentations",
    "keywords": "Method ExecuteNonQueryAsync ExecuteNonQueryAsync(SPCallInfo, CallbackExecuteNonQuery, CancellationToken) Executes a non-query stored procedure call asynchronously. Declaration public virtual Task<PgSqlHelper> ExecuteNonQueryAsync(SPCallInfo spCallInfo, CallbackExecuteNonQuery callback, CancellationToken cancellationToken = default) Parameters Type Name Description SPCallInfo spCallInfo The information about the stored procedure call. CallbackExecuteNonQuery callback The callback function to handle the result of the non-query execution. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The updated PgSqlHelper instance. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"delete_data\", Parameters = new[] { new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer } } }; await helper.ExecuteNonQueryAsync( spCallInfo, (result) => { Console.WriteLine($\"Deleted {result} rows from table 'mytable'.\"); } ); ExecuteNonQueryAsync(string, CallbackExecuteNonQuery, CancellationToken) Executes a non-query PostgreSQL command asynchronously. Declaration public virtual Task<PgSqlHelper> ExecuteNonQueryAsync(string query, CallbackExecuteNonQuery callback, CancellationToken cancellationToken = default) Parameters Type Name Description string query The query to execute. CallbackExecuteNonQuery callback The callback method to execute after the query is executed. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> A Task representing the asynchronous operation. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); string query = \"DELETE FROM mytable WHERE id = 1\"; await helper.ExecuteNonQueryAsync( query, (result) => { Console.WriteLine($\"Deleted {result} rows from table 'mytable'.\"); } ); Exceptions Type Condition ArgumentNullException Thrown when the query is null or whitespace."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQuery.html",
    "title": "Method ExecuteQuery | Back End Documentations",
    "keywords": "Method ExecuteQuery ExecuteQuery(SPCallInfo, out List<dynamic>?) Executes a stored procedure call and retrieves the result as a list of dynamic objects. Declaration public virtual PgSqlHelper ExecuteQuery(SPCallInfo spCallInfo, out List<dynamic>? result) Parameters Type Name Description SPCallInfo spCallInfo The stored procedure call information. List<dynamic> result The list of dynamic objects returned by the query. Returns Type Description PgSqlHelper The modified PgSqlHelper instance. Examples var spCallInfo = new SPCallInfo { ProcedureName = \"GetEmployees\", Parameters = new List<SPParameter> { new SPCallInfo.SPCallInfoParameter { ParameterName = \"@departmentId\", DbType = NpgsqlDbType.Integer, Value = 1 } } }; var result = new List<dynamic>(); await helper.ExecuteQuery(spCallInfo, out result); foreach (var row in result) { Console.WriteLine(row); } Exceptions Type Condition ArgumentNullException Thrown when the stored procedure call information is null. ExecuteQuery(string, out List<dynamic>?) Executes a query and retrieves the result as a list of dynamic objects. Declaration public virtual PgSqlHelper ExecuteQuery(string query, out List<dynamic>? result) Parameters Type Name Description string query The SQL query to execute. List<dynamic> result The list of dynamic objects returned by the query. Returns Type Description PgSqlHelper The modified PgSqlHelper instance. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); var result = await helper.ExecuteQuery(\"SELECT * FROM mytable LIMIT 10\"); foreach (var row in result) { Console.WriteLine(row); } Exceptions Type Condition ArgumentNullException Thrown when the query is null or empty."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteQueryAsync.html",
    "title": "Method ExecuteQueryAsync | Back End Documentations",
    "keywords": "Method ExecuteQueryAsync ExecuteQueryAsync(SPCallInfo, CallbackExecuteQuery, CancellationToken) Executes the specified stored procedure call asynchronously and invokes the provided callback with the result. Declaration public virtual Task<PgSqlHelper> ExecuteQueryAsync(SPCallInfo spCallInfo, CallbackExecuteQuery callback, CancellationToken cancellationToken = default) Parameters Type Name Description SPCallInfo spCallInfo The stored procedure call information. CallbackExecuteQuery callback The callback function to be invoked with the result. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The updated PgSqlHelper instance. Examples var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"get_data\", Parameters = new[] { new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer } } }; await helper.ExecuteQueryAsync( spCallInfo, (rows) => { foreach (var row in rows) { Console.WriteLine(row); } } ); ExecuteQueryAsync(string, CallbackExecuteQuery, CancellationToken) Executes a SQL query asynchronously. Declaration public virtual Task<PgSqlHelper> ExecuteQueryAsync(string query, CallbackExecuteQuery callback, CancellationToken cancellationToken = default) Parameters Type Name Description string query The SQL query to execute. CallbackExecuteQuery callback The callback function to execute with the query result. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The updated instance of the PgSqlHelper class. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); await helper.ExecuteQueryAsync( \"SELECT * FROM mytable\", (rows) => { foreach (var row in rows) { Console.WriteLine(row); } } ); Exceptions Type Condition ArgumentNullException Thrown when the query string is null or whitespace."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalar.html",
    "title": "Method ExecuteScalar | Back End Documentations",
    "keywords": "Method ExecuteScalar ExecuteScalar<T>(SPCallInfo, out T?) Executes the specified stored procedure call and returns the first column of the first row of the result set as a scalar value. Declaration public virtual PgSqlHelper ExecuteScalar<T>(SPCallInfo spCallInfo, out T? result) Parameters Type Name Description SPCallInfo spCallInfo The stored procedure call information. T result When this method returns, contains the value of the first column of the first row of the result set, converted to T. If the result is null, the value of result will also be null. Returns Type Description PgSqlHelper The PgSqlHelper instance. Type Parameters Name Description T The type of the result value. Examples var spCallInfo = new SPCallInfo(\"myProcedureName\") { Parameters = { new SPParameter(\"myParameterName\", 1) } }; int? result; await helper.ExecuteScalar<int>(spCallInfo, out result); Console.WriteLine($\"Result: {result?.ToString() ?? \"null\"}\"); Exceptions Type Condition InvalidOperationException Thrown when the connection is not open. ArgumentNullException Thrown when spCallInfo is null. InvalidCastException Thrown when the result value cannot be converted to T. ExecuteScalar<T>(string, out T?) Executes a SQL query and returns the scalar result. Declaration public virtual PgSqlHelper ExecuteScalar<T>(string query, out T? result) Parameters Type Name Description string query The SQL query to execute. T result The scalar result of the query. Returns Type Description PgSqlHelper The modified PgSqlHelper instance. Type Parameters Name Description T The type of the result. Examples string query = \"SELECT COUNT(*) FROM mytable\"; int? result; await helper.ExecuteScalar<int>(query, out result); Console.WriteLine($\"Result: {result?.ToString() ?? \"null\"}\");"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.ExecuteScalarAsync.html",
    "title": "Method ExecuteScalarAsync | Back End Documentations",
    "keywords": "Method ExecuteScalarAsync ExecuteScalarAsync<T>(SPCallInfo, CallbackExecuteScalar<T>, CancellationToken) Executes a stored procedure and retrieves a single scalar value asynchronously. Declaration public virtual Task<PgSqlHelper> ExecuteScalarAsync<T>(SPCallInfo spCallInfo, CallbackExecuteScalar<T> callback, CancellationToken cancellationToken = default) Parameters Type Name Description SPCallInfo spCallInfo The information of the stored procedure call. CallbackExecuteScalar<T> callback The callback function to handle the retrieved scalar value. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Type Parameters Name Description T The type of the scalar value. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); var spCallInfo = new SPCallInfo { ProcedureName = \"get_id\", Parameters = new[] { new SPParameter { Name = \"name\", Value = \"John Doe\", DataType = NpgsqlDbType.Varchar } } }; await helper.ExecuteScalarAsync<int>( spCallInfo, (result) => { Console.WriteLine($\"The ID of {spCallInfo.Parameters[0].Value} is {result}\"); } ); ExecuteScalarAsync<T>(string, CallbackExecuteScalar<T>, CancellationToken) Executes the specified query and returns the scalar result asynchronously. Declaration public virtual Task<PgSqlHelper> ExecuteScalarAsync<T>(string query, CallbackExecuteScalar<T> callback, CancellationToken cancellationToken = default) Parameters Type Name Description string query The query to execute. CallbackExecuteScalar<T> callback The callback function to process the scalar result. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The PgSqlHelper instance. Type Parameters Name Description T The type of the scalar result. Examples using var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.ConnectAsync(); string query = \"SELECT COUNT(*) FROM mytable\"; await helper.ExecuteScalarAsync<int>( query, (result) => { Console.WriteLine($\"Found {result} rows in table 'mytable'.\"); } ); Exceptions Type Condition ArgumentNullException Thrown when query is null or whitespace."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Rollback.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.Rollback.html",
    "title": "Method Rollback | Back End Documentations",
    "keywords": "Method Rollback Rollback(bool) Rolls back the current transaction. Declaration public virtual PgSqlHelper Rollback(bool restartTransaction = false) Parameters Type Name Description bool restartTransaction Indicates whether to restart the transaction after rolling back. Returns Type Description PgSqlHelper A reference to the current PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); throw new Exception(\"Exception for test purpose.\"); } catch (Exception ex) { db.Rollback(); Console.WriteLine(\"Transaction rolled back.\"); throw; } Exceptions Type Condition InvalidOperationException Thrown if there is no active transaction."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.RollbackAsync.html",
    "title": "Method RollbackAsync | Back End Documentations",
    "keywords": "Method RollbackAsync RollbackAsync(bool, CancellationToken) Rollbacks the current transaction asynchronously. Declaration public virtual Task<PgSqlHelper> RollbackAsync(bool restartTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description bool restartTransaction Indicates whether to restart the transaction after rollback. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> The updated PgSqlHelper instance. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); throw new Exception(\"Exception for test purpose.\"); } catch (Exception ex) { await db.RollbackAsync(); Console.WriteLine(\"Transaction rolled back.\"); throw; } Exceptions Type Condition InvalidOperationException Thrown when the connection is not established. RollbackAsync(Action, bool, CancellationToken) Rollbacks the current transaction asynchronously and executes the specified callback. Declaration public virtual Task<PgSqlHelper> RollbackAsync(Action callback, bool restartTransaction = false, CancellationToken cancellationToken = default) Parameters Type Name Description Action callback The callback to execute after rolling back the transaction. bool restartTransaction Whether to restart the transaction after rolling back. Default is false. CancellationToken cancellationToken Returns Type Description Task<PgSqlHelper> A task representing the asynchronous operation. Examples using var db = new PgSqlHelper(\"Host=localhost;Username=myuser;Password=mypassword;Database=mydb\"); await db.ConnectAsync(); await db.BeginTransactionAsync(); try { await db.ExecuteQuery(\"insert into mytable (name) values ('John Doe')\"); throw new Exception(\"Exception for test purpose.\"); } catch (Exception ex) { await db.RollbackAsync( () => { Console.WriteLine(\"Transaction rolled back.\"); }, restartTransaction: true ); throw; } Exceptions Type Condition InvalidOperationException Thrown if the connection is not established."
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.PgSqlHelper.html",
    "title": "Class PgSqlHelper | Back End Documentations",
    "keywords": "Class PgSqlHelper Provides a helper class for interacting with a PostgreSQL database. Inheritance object PgSqlHelper Implements IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.DataProcessor Assembly: IDX.Utilities.dll Syntax public class PgSqlHelper : IDisposable, IAsyncDisposable Examples using var pgh = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await pgh.ConnectAsync(() => { }); var result = await pgh.ExecuteQuery(\"select * from mytable limit 10\", rows => { foreach (var row in rows) { Console.WriteLine(row); } }); await pgh.DisposeAsync(); Constructors Name Description PgSqlHelper() PgSqlHelper(ConStringFromJson) Initializes a new instance of the PgSqlDataProcessor class. PgSqlHelper(CommonConnectionString, string?, byte[]?) Initializes a new instance of the PgSqlHelper class with the specified connection string, encryption key, and encryption salts. PgSqlHelper(string) Initializes a new instance of the PgSqlDataProcessor class. Methods Name Description BsTableData(PagingRequest, out BTResponse<List<dynamic>?>) Retrieves table data based on the provided paging request and calls the specified callback with the result. BsTableDataAsync(PagingRequest, CallbackBTData, CancellationToken) Retrieves table data based on the provided paging request and calls the specified callback with the result. ChangeDB(string?, bool) Changes the database of the PgSqlHelper instance. ChangeDBAsync(Action, string?, bool, CancellationToken) Changes the database connection asynchronously. ChangeDBAsync(string?, bool, CancellationToken) Changes the database connection to the specified database. ChangeDBAsync(Task, string?, bool, CancellationToken) Changes the database connection asynchronously. Commit(bool) Commits the current transaction and restarts it if specified. CommitAsync(Action, bool, CancellationToken) Commits the current transaction and executes a callback action asynchronously. CommitAsync(bool, CancellationToken) Commits the current transaction and optionally restarts the transaction. Connect(ConStringFromJson, bool, bool) Connects to the PgSql database. Connect(CommonConnectionString, string?, byte[]?, bool, bool) Connects to the Postgres database using the provided connection string, encryption key, and salts. Connect(bool, bool) Connects to the PostgreSQL database. Connect(string, bool, bool) Connects to a PostgreSQL database using the provided connection string. ConnectAsync(ConStringFromJson, Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. ConnectAsync(CommonConnectionString, string?, byte[]?, Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. ConnectAsync(Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. ConnectAsync(string, Action?, bool, bool, CancellationToken) Connects to the PostgreSQL database asynchronously. Disconnect(bool) Disconnects from the PostgreSQL database. DisconnectAsync(Action, bool, CancellationToken) Disconnects from the PostgreSQL server and executes the specified callback asynchronously. DisconnectAsync(bool, CancellationToken) Disconnects from the PostgreSQL database. Dispose() Performs the necessary cleanup operations. using (var db = new PgSqlHelper()) { db.Dispose(); } Dispose(bool) Disposes of the resources used by the object. DisposeAsync() Asynchronously performs the necessary cleanup operations. DisposeAsyncCore() Disposes of the resources used by the object asynchronously. Done(bool) Marks the operation as completed and performs necessary cleanup. DoneAsync(Action, bool, CancellationToken) Executes the provided callback and optionally commits the transaction. ExecuteNonQuery(SPCallInfo, out int) Executes a non-query stored procedure call and returns the updated PgSqlHelper instance. ExecuteNonQuery(string, out int) Executes a non-query SQL statement and returns the modified row count. ExecuteNonQueryAsync(SPCallInfo, CallbackExecuteNonQuery, CancellationToken) Executes a non-query stored procedure call asynchronously. ExecuteNonQueryAsync(string, CallbackExecuteNonQuery, CancellationToken) Executes a non-query PostgreSQL command asynchronously. ExecuteQuery(SPCallInfo, out List<dynamic>?) Executes a stored procedure call and retrieves the result as a list of dynamic objects. ExecuteQuery(string, out List<dynamic>?) Executes a query and retrieves the result as a list of dynamic objects. ExecuteQueryAsync(SPCallInfo, CallbackExecuteQuery, CancellationToken) Executes the specified stored procedure call asynchronously and invokes the provided callback with the result. ExecuteQueryAsync(string, CallbackExecuteQuery, CancellationToken) Executes a SQL query asynchronously. ExecuteScalarAsync<T>(SPCallInfo, CallbackExecuteScalar<T>, CancellationToken) Executes a stored procedure and retrieves a single scalar value asynchronously. ExecuteScalarAsync<T>(string, CallbackExecuteScalar<T>, CancellationToken) Executes the specified query and returns the scalar result asynchronously. ExecuteScalar<T>(SPCallInfo, out T?) Executes the specified stored procedure call and returns the first column of the first row of the result set as a scalar value. ExecuteScalar<T>(string, out T?) Executes a SQL query and returns the scalar result. Rollback(bool) Rolls back the current transaction. RollbackAsync(Action, bool, CancellationToken) Rollbacks the current transaction asynchronously and executes the specified callback. RollbackAsync(bool, CancellationToken) Rollbacks the current transaction asynchronously. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.DataProcessor.html": {
    "href": "api/idc.utility/IDX.Utilities.DataProcessor.html",
    "title": "Namespace IDX.Utilities.DataProcessor | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.DataProcessor Classes CouchBaseHelper Provides a helper class for interacting with a Couchbase server. PgSqlHelper Provides a helper class for interacting with a PostgreSQL database. PgSqlHelper.ConStringFromJson Represents the connection string options when connecting to a PostgreSQL database using a JSON file."
  },
  "api/idc.utility/IDX.Utilities.Delegator.CallbackBTData.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.CallbackBTData.html",
    "title": "Delegate CallbackBTData | Back End Documentations",
    "keywords": "Delegate CallbackBTData Represents a callback that handles BT data. Namespace: IDX.Utilities.Delegator Assembly: IDX.Utilities.dll Syntax public delegate Task CallbackBTData(BTResponse<List<dynamic>?> result) Parameters Type Name Description BTResponse<List<dynamic>> result The BT response as a list of dynamic objects. Returns Type Description Task A task that represents the asynchronous operation. Examples CallbackBTData callback = (result) => { foreach (var row in result.Rows) { Console.WriteLine(row); } return Task.CompletedTask; }; Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Delegator.CallbackExecuteNonQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.CallbackExecuteNonQuery.html",
    "title": "Delegate CallbackExecuteNonQuery | Back End Documentations",
    "keywords": "Delegate CallbackExecuteNonQuery Represents a callback that executes a non-query command and returns the number of affected rows. Namespace: IDX.Utilities.Delegator Assembly: IDX.Utilities.dll Syntax public delegate Task CallbackExecuteNonQuery(int result) Parameters Type Name Description int result The number of affected rows. Returns Type Description Task A task that represents the asynchronous operation. Examples CallbackExecuteNonQuery callback = (result) => { Console.WriteLine($\"Affected rows: {result}\"); return Task.CompletedTask; }; Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Delegator.CallbackExecuteQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.CallbackExecuteQuery.html",
    "title": "Delegate CallbackExecuteQuery | Back End Documentations",
    "keywords": "Delegate CallbackExecuteQuery Represents a callback that executes a query and returns a list of dynamic objects as a result. Namespace: IDX.Utilities.Delegator Assembly: IDX.Utilities.dll Syntax public delegate Task CallbackExecuteQuery(List<dynamic> result) Parameters Type Name Description List<dynamic> result The query result as a list of dynamic objects. Returns Type Description Task A task that represents the asynchronous operation. Examples CallbackExecuteQuery callback = (result) => { foreach (var row in result) { Console.WriteLine(row); } return Task.CompletedTask; }; Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Delegator.CallbackExecuteScalar-1.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.CallbackExecuteScalar-1.html",
    "title": "Delegate CallbackExecuteScalar<T> | Back End Documentations",
    "keywords": "Delegate CallbackExecuteScalar<T> Represents a callback that executes a scalar query and returns a nullable result. Namespace: IDX.Utilities.Delegator Assembly: IDX.Utilities.dll Syntax public delegate Task CallbackExecuteScalar<in T>(T? result) Parameters Type Name Description T result The query result as a nullable value of type T. Returns Type Description Task A task that represents the asynchronous operation. Type Parameters Name Description T The type of the result. Examples CallbackExecuteScalar<int> callback = (result) => { Console.WriteLine($\"Scalar query result: {result}\"); return Task.CompletedTask; }; Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Delegator.CallbackValidateQuery.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.CallbackValidateQuery.html",
    "title": "Delegate CallbackValidateQuery | Back End Documentations",
    "keywords": "Delegate CallbackValidateQuery Represents a callback that validates a query result. Namespace: IDX.Utilities.Delegator Assembly: IDX.Utilities.dll Syntax public delegate Task CallbackValidateQuery(string result) Parameters Type Name Description string result The query result to validate. Returns Type Description Task A task that represents the asynchronous operation. Examples CallbackValidateQuery callback = (result) => { if (!result.StartsWith(\"OK\")) { throw new InvalidOperationException($\"Query failed with message: {result}\"); } return Task.CompletedTask; }; Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Delegator.CommonCallback.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.CommonCallback.html",
    "title": "Delegate CommonCallback | Back End Documentations",
    "keywords": "Delegate CommonCallback Represents a callback that does not return a value. Namespace: IDX.Utilities.Delegator Assembly: IDX.Utilities.dll Syntax public delegate Task CommonCallback() Returns Type Description Task A task that represents the asynchronous operation. Examples CommonCallback callback = () => { Console.WriteLine(\"Callback executed.\"); return Task.CompletedTask; }; Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Delegator.html": {
    "href": "api/idc.utility/IDX.Utilities.Delegator.html",
    "title": "Namespace IDX.Utilities.Delegator | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Delegator Delegates CallbackBTData Represents a callback that handles BT data. CallbackExecuteNonQuery Represents a callback that executes a non-query command and returns the number of affected rows. CallbackExecuteQuery Represents a callback that executes a query and returns a list of dynamic objects as a result. CallbackExecuteScalar<T> Represents a callback that executes a scalar query and returns a nullable result. CallbackValidateQuery Represents a callback that validates a query result. CommonCallback Represents a callback that does not return a value."
  },
  "api/idc.utility/IDX.Utilities.Encryptor.-ctor.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.-ctor.html",
    "title": "Constructor Encryptor | Back End Documentations",
    "keywords": "Constructor Encryptor Encryptor() Initializes a new instance of the Encryptor class. Declaration public Encryptor() Examples var encryptor = new Encryptor(); Console.WriteLine($\"Salts: {string.Join(\", \", encryptor.Salts)}\"); Console.WriteLine($\"EncryptionKey: {encryptor.EncryptionKey}\"); // Output: // Salts: 9, 54, 49, 54, 32, 53, 51, 50, 54, 51, 50, 51, 54 // EncryptionKey: idxpartners Encryptor(byte[]?, string?) Initializes a new instance of the Encryptor class. Declaration public Encryptor(byte[]? salts, string? encryptionKey) Parameters Type Name Description byte[] salts The salts to use for encryption. If null, the default salts will be used. string encryptionKey The encryption key. If null, the default encryption key will be used. Examples var encryptor = new Encryptor( new byte[] { 0b1001001, 0b1110110, 0b1100001 }, \"my secret key\" ); Console.WriteLine($\"Salts: {string.Join(\", \", encryptor.Salts)}\"); Console.WriteLine($\"EncryptionKey: {encryptor.EncryptionKey}\"); // Output: // Salts: 9, 54, 49 // EncryptionKey: my secret key Encryptor(byte[]?) Initializes a new instance of the Encryptor class with the specified salts. Declaration public Encryptor(byte[]? salts) Parameters Type Name Description byte[] salts The salts to be used for encryption. Examples var encryptor = new Encryptor( new byte[] { 0b1001001, 0b1110110, 0b1100001 } ); Console.WriteLine($\"Salts: {string.Join(\", \", encryptor.Salts)}\"); // Output: // Salts: 9, 54, 49 Encryptor(string?) Initializes a new instance of the Encryptor class with the specified encryption key. Declaration public Encryptor(string? encryptionKey) Parameters Type Name Description string encryptionKey The encryption key. If null, the default encryption key will be used. Examples var encryptor = new Encryptor(\"my secret key\"); Console.WriteLine($\"EncryptionKey: {encryptor.EncryptionKey}\"); // Output: // EncryptionKey: my secret key Exceptions Type Condition ArgumentException Thrown when the encryption key is null or whitespace."
  },
  "api/idc.utility/IDX.Utilities.Encryptor.ChangeEncryptionKey.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.ChangeEncryptionKey.html",
    "title": "Method ChangeEncryptionKey | Back End Documentations",
    "keywords": "Method ChangeEncryptionKey ChangeEncryptionKey(string) Changes the encryption key used by the encryptor. Declaration public virtual Encryptor ChangeEncryptionKey(string encryptionKey) Parameters Type Name Description string encryptionKey The new encryption key. Returns Type Description Encryptor The updated encryptor instance. Examples var encryptor = new Encryptor(); encryptor.ChangeEncryptionKey(\"my secret key\"); Console.WriteLine($\"EncryptionKey: {encryptor.EncryptionKey}\"); // Output: // EncryptionKey: my secret key"
  },
  "api/idc.utility/IDX.Utilities.Encryptor.ChangeSalts.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.ChangeSalts.html",
    "title": "Method ChangeSalts | Back End Documentations",
    "keywords": "Method ChangeSalts ChangeSalts(byte[]?) Changes the salts used for encryption. Declaration public virtual Encryptor ChangeSalts(byte[]? salts) Parameters Type Name Description byte[] salts The new salts to be used. Returns Type Description Encryptor The updated Encryptor instance. Examples var encryptor = new Encryptor(); encryptor.ChangeSalts(new byte[] { 0x01, 0x02, 0x03 }); Console.WriteLine($\"Salts: {string.Join(\", \", encryptor.Salts)}\"); // Output: // Salts: 1, 2, 3"
  },
  "api/idc.utility/IDX.Utilities.Encryptor.Decrypt.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.Decrypt.html",
    "title": "Method Decrypt | Back End Documentations",
    "keywords": "Method Decrypt Decrypt(string?, out string?) Decrypts the specified text using AES encryption. Declaration public virtual Encryptor Decrypt(string? text, out string? output) Parameters Type Name Description string text The text to decrypt. string output The decrypted output. Returns Type Description Encryptor The current instance of the Encryptor class. Examples var encryptor = new Encryptor(); encryptor.Salts = new byte[] { 0x01, 0x02 }; encryptor.EncryptionKey = \"mysecretkey\"; string? output; var result = encryptor.Decrypt(\"/fLx9Rz9yJmSd8KjZV2U+g==\", out output); Console.WriteLine($\"Decrypted: {output}\"); // Output: // Decrypted: mydata"
  },
  "api/idc.utility/IDX.Utilities.Encryptor.Dispose.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.Dispose.html",
    "title": "Method Dispose | Back End Documentations",
    "keywords": "Method Dispose Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements IDisposable.Dispose() Examples using var encryptor = new Encryptor(); encryptor.Dispose(); Dispose(bool) Disposes of the resources used by the object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. Examples using var encryptor = new Encryptor(); encryptor.Dispose(disposing: true);"
  },
  "api/idc.utility/IDX.Utilities.Encryptor.Encrypt.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.Encrypt.html",
    "title": "Method Encrypt | Back End Documentations",
    "keywords": "Method Encrypt Encrypt(string?, out string?) Encrypts the given text using AES encryption and returns the encryptor object. Declaration public virtual Encryptor Encrypt(string? text, out string? output) Parameters Type Name Description string text The text to encrypt. string output The output variable to store the encrypted text. Returns Type Description Encryptor The encryptor object. Examples var encryptor = new Encryptor(); encryptor.Salts = new byte[] { 0x01, 0x02 }; encryptor.EncryptionKey = \"mysecretkey\"; string? output; var result = encryptor.Encrypt(\"mydata\", out output); Console.WriteLine($\"Encrypted: {output}\"); // Output: // Encrypted: /fLx9Rz9yJmSd8KjZV2U+g=="
  },
  "api/idc.utility/IDX.Utilities.Encryptor.EncryptionKey.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.EncryptionKey.html",
    "title": "Property EncryptionKey | Back End Documentations",
    "keywords": "Property EncryptionKey EncryptionKey Gets or sets the encryption key used for encryption. Declaration [Required(ErrorMessage = \"Encryption Key is required\")] public string? EncryptionKey { get; set; } Property Value Type Description string Remarks The encryption key is used to encrypt the data. The encryption key is used to generate a key from the password and the salts. Examples var encryptor = new Encryptor(); encryptor.EncryptionKey = \"mysecretkey\";"
  },
  "api/idc.utility/IDX.Utilities.Encryptor.Salts.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.Salts.html",
    "title": "Property Salts | Back End Documentations",
    "keywords": "Property Salts Salts Gets or sets the salts used for encryption. Declaration [Required(ErrorMessage = \"Salts is required\")] public byte[]? Salts { get; set; } Property Value Type Description byte[] Remarks The salts are used to add randomness to the encryption. Examples var encryptor = new Encryptor(); encryptor.Salts = new byte[] { 0x01, 0x02 };"
  },
  "api/idc.utility/IDX.Utilities.Encryptor.html": {
    "href": "api/idc.utility/IDX.Utilities.Encryptor.html",
    "title": "Class Encryptor | Back End Documentations",
    "keywords": "Class Encryptor Represents an encryptor class. Inheritance object Encryptor Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities Assembly: IDX.Utilities.dll Syntax public class Encryptor : IDisposable Examples using IDX.Utilities; var encryptor = new Encryptor(); encryptor.Salts = new byte[] { 0x01, 0x02 }; encryptor.EncryptionKey = \"mysecretkey\"; var encryptedData = encryptor.Encrypt(\"mydata\"); Console.WriteLine(encryptedData); // Output: /fLx9Rz9yJmSd8KjZV2U+g== Constructors Name Description Encryptor() Initializes a new instance of the Encryptor class. Encryptor(byte[]?) Initializes a new instance of the Encryptor class with the specified salts. Encryptor(byte[]?, string?) Initializes a new instance of the Encryptor class. Encryptor(string?) Initializes a new instance of the Encryptor class with the specified encryption key. Properties Name Description EncryptionKey Gets or sets the encryption key used for encryption. Salts Gets or sets the salts used for encryption. Methods Name Description ChangeEncryptionKey(string) Changes the encryption key used by the encryptor. ChangeSalts(byte[]?) Changes the salts used for encryption. Decrypt(string?, out string?) Decrypts the specified text using AES encryption. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Dispose(bool) Disposes of the resources used by the object. Encrypt(string?, out string?) Encrypts the given text using AES encryption and returns the encryptor object. Extension Methods Common.EnsureModel(Encryptor) ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.AddAuthorization.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.AddAuthorization.html",
    "title": "Method AddAuthorization | Back End Documentations",
    "keywords": "Method AddAuthorization AddAuthorization(HttpClient, string) Adds the authorization header to the HttpClient. Declaration public static void AddAuthorization(this HttpClient httpClient, string credential) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string credential The authorization credential. Examples using IDX.Utilities; var client = new HttpClient(); client.AddAuthorization(\"Bearer myToken\"); Exceptions Type Condition ArgumentNullException Thrown when httpClient is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.AsyncGet.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.AsyncGet.html",
    "title": "Method AsyncGet | Back End Documentations",
    "keywords": "Method AsyncGet AsyncGet(HttpClient, string, string?, CancellationToken) Sends an asynchronous HTTP GET request to the specified URL. Declaration public static Task<HttpResponseMessage> AsyncGet(this HttpClient httpClient, string url, string? credential = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string url The URL to send the request to. string credential The credential for authorization. Optional. CancellationToken cancellationToken The cancellation token to cancel the request. Optional. Returns Type Description Task<HttpResponseMessage> A Task that represents the asynchronous GET operation. Examples using IDX.Utilities; var client = new HttpClient(); client.SetDefault(); var response = await client.AsyncGet(\"https://api.example.com/data\"); response.EnsureSuccessStatusCode(); var data = await response.Content.ReadAsStringAsync(); Console.WriteLine(data); Exceptions Type Condition ArgumentNullException Thrown when httpClient or url is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.AsyncPost.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.AsyncPost.html",
    "title": "Method AsyncPost | Back End Documentations",
    "keywords": "Method AsyncPost AsyncPost(HttpClient, string, HttpContent, string?, JObject?, CancellationToken) Sends an asynchronous HTTP POST request to the specified URL with the given content. Declaration public static Task<HttpResponseMessage> AsyncPost(this HttpClient httpClient, string url, HttpContent content, string? credential = null, JObject? headers = null, CancellationToken cancellationToken = default) Parameters Type Name Description HttpClient httpClient The HttpClient instance. string url The URL to send the request to. HttpContent content The content of the request. string credential The optional credential to use for authorization. JObject headers The optional headers to include in the request. CancellationToken cancellationToken The optional cancellation token. Returns Type Description Task<HttpResponseMessage> A Task representing the asynchronous operation that returns an HttpResponseMessage. Examples using IDX.Utilities; var client = new HttpClient(); var content = new StringContent(\"Hello world\", Encoding.UTF8, \"text/plain\"); var response = await client.AsyncPost(\"https://api.example.com/upload\", content, \"Bearer myToken\"); response.EnsureSuccessStatusCode(); var result = await response.Content.ReadAsStringAsync(); Console.WriteLine(result); Exceptions Type Condition ArgumentNullException Thrown when httpClient or url is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.SetDefault.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.SetDefault.html",
    "title": "Method SetDefault | Back End Documentations",
    "keywords": "Method SetDefault SetDefault(HttpClient) Removes the \"Authorization\" header from the default request headers of the given HttpClient. Declaration public static void SetDefault(this HttpClient httpClient) Parameters Type Name Description HttpClient httpClient The HttpClient instance. Examples using IDX.Utilities; var client = new HttpClient(); client.SetDefault(); Exceptions Type Condition ArgumentNullException Thrown when httpClient is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.HttpClientExtensions.html",
    "title": "Class HttpClientExtensions | Back End Documentations",
    "keywords": "Class HttpClientExtensions Provides extension methods for the HttpClient class. Inheritance object HttpClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Extensions Assembly: IDX.Utilities.dll Syntax public static class HttpClientExtensions Methods Name Description AddAuthorization(HttpClient, string) Adds the authorization header to the HttpClient. AsyncGet(HttpClient, string, string?, CancellationToken) Sends an asynchronous HTTP GET request to the specified URL. AsyncPost(HttpClient, string, HttpContent, string?, JObject?, CancellationToken) Sends an asynchronous HTTP POST request to the specified URL with the given content. SetDefault(HttpClient) Removes the \"Authorization\" header from the default request headers of the given HttpClient."
  },
  "api/idc.utility/IDX.Utilities.Extensions.JObjectExtensions.GetValue.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.JObjectExtensions.GetValue.html",
    "title": "Method GetValue | Back End Documentations",
    "keywords": "Method GetValue GetValue<T>(JToken, string) Retrieves the value of a property from a JSON token. Declaration public static T? GetValue<T>(this JToken token, string propertyName) where T : class Parameters Type Name Description JToken token The JSON token. string propertyName The name of the property. Returns Type Description T The value of the property, or the default value of T if the property is not found or the value cannot be converted. Type Parameters Name Description T The type of the value to retrieve. Examples var json = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30,\\\"address\\\":{\\\"city\\\":\\\"NY\\\"}}\"; var jobj = JObject.Parse(json); var name = jobj.GetValue<string>(\"name\"); var age = jobj.GetValue<int>(\"age\"); var city = jobj.GetValue<string>(\"address.city\"); Console.WriteLine($\"Name: {name}, Age: {age}, City: {city}\"); Exceptions Type Condition ArgumentNullException Thrown if token is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.JObjectExtensions.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.JObjectExtensions.html",
    "title": "Class JObjectExtensions | Back End Documentations",
    "keywords": "Class JObjectExtensions Extension methods for Newtonsoft.Json.Linq.JToken. Inheritance object JObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Extensions Assembly: IDX.Utilities.dll Syntax public static class JObjectExtensions Methods Name Description GetValue<T>(JToken, string) Retrieves the value of a property from a JSON token."
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToBoolean.html",
    "title": "Method CastToBoolean | Back End Documentations",
    "keywords": "Method CastToBoolean CastToBoolean(object?, bool) Converts an object to a boolean value. Declaration public static bool CastToBoolean(this object? value, bool defaultValue = false) Parameters Type Name Description object value The object to convert. bool defaultValue The default value to return if the object is null. Returns Type Description bool The converted boolean value. Examples var obj = \"true\"; var result = obj.CastToBoolean(); Console.WriteLine(result); // Output: true"
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToDateTime.html",
    "title": "Method CastToDateTime | Back End Documentations",
    "keywords": "Method CastToDateTime CastToDateTime(object?, DateTime) Casts the specified value to a DateTime object. Declaration public static DateTime CastToDateTime(this object? value, DateTime defaultValue = default) Parameters Type Name Description object value The value to cast. DateTime defaultValue The default value to return if the cast fails. Returns Type Description DateTime The casted DateTime value if the cast is successful; otherwise, the specified defaultValue. Examples var obj = \"2022-01-01\"; var result = obj.CastToDateTime(); Console.WriteLine(result); // Output: 1/1/2022 12:00:00 AM"
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToDecimal.html",
    "title": "Method CastToDecimal | Back End Documentations",
    "keywords": "Method CastToDecimal CastToDecimal(object?, decimal) Casts the specified value to a decimal. Declaration public static decimal CastToDecimal(this object? value, decimal defaultValue = 0) Parameters Type Name Description object value The value to cast. decimal defaultValue The default value to return if the cast fails. Returns Type Description decimal The casted decimal value if the cast is successful; otherwise, the default value. Examples var obj = \"123.456\"; var result = obj.CastToDecimal(); Console.WriteLine(result); // Output: 123.456 Exceptions Type Condition InvalidCastException Thrown when the cast fails and the default value is not a valid decimal."
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToDouble.html",
    "title": "Method CastToDouble | Back End Documentations",
    "keywords": "Method CastToDouble CastToDouble(object?, double) Converts the specified value to a double. Declaration public static double CastToDouble(this object? value, double defaultValue = 0) Parameters Type Name Description object value The value to convert. double defaultValue The default value to return if the conversion fails. Returns Type Description double The converted double value, or the default value if the conversion fails. Examples var obj = \"123.456\"; var result = obj.CastToDouble(); Console.WriteLine(result); // Output: 123.456"
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToInteger.html",
    "title": "Method CastToInteger | Back End Documentations",
    "keywords": "Method CastToInteger CastToInteger(object?, int) Casts an object to an integer value. Declaration public static int CastToInteger(this object? value, int defaultValue = 0) Parameters Type Name Description object value The object to be casted. int defaultValue The default value to be returned if the object is null. Returns Type Description int The integer value of the object, or the default value if the object is null. Examples var obj = \"123\"; var result = obj.CastToInteger(); Console.WriteLine(result); // Output: 123 Exceptions Type Condition InvalidCastException Thrown when the object cannot be converted to an integer."
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToString.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.CastToString.html",
    "title": "Method CastToString | Back End Documentations",
    "keywords": "Method CastToString CastToString(object?, string) Converts an object to a string representation. Declaration public static string CastToString(this object? value, string defaultValue = \"\") Parameters Type Name Description object value The object to convert. string defaultValue The default value to return if the object is null. Returns Type Description string The string representation of the object or the default value if the object is null. Examples var obj = 123; var result = obj.CastToString(); Console.WriteLine(result); // Output: \"123\""
  },
  "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.ObjectExtensions.html",
    "title": "Class ObjectExtensions | Back End Documentations",
    "keywords": "Class ObjectExtensions Provides extension methods for objects. Inheritance object ObjectExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Extensions Assembly: IDX.Utilities.dll Syntax public static class ObjectExtensions Methods Name Description CastToBoolean(object?, bool) Converts an object to a boolean value. CastToDateTime(object?, DateTime) Casts the specified value to a DateTime object. CastToDecimal(object?, decimal) Casts the specified value to a decimal. CastToDouble(object?, double) Converts the specified value to a double. CastToInteger(object?, int) Casts an object to an integer value. CastToString(object?, string) Converts an object to a string representation."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.BindWith.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.BindWith.html",
    "title": "Method BindWith | Back End Documentations",
    "keywords": "Method BindWith BindWith(string, Dictionary<string, object>) Replaces placeholders in a string with corresponding values from a dictionary. Declaration public static string BindWith(this string text, Dictionary<string, object> replacement) Parameters Type Name Description string text The input string. Dictionary<string, object> replacement The dictionary containing the placeholder-value pairs. Returns Type Description string A new string with placeholders replaced by corresponding values. Examples var input = \"Hello {name}, your age is {age}.\"; var replacement = new Dictionary<string, object> { [\"name\"] = \"John Doe\", [\"age\"] = 42 }; var result = input.BindWith(replacement); Console.WriteLine(result); // Output: Hello John Doe, your age is 42."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ChangeCase.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ChangeCase.html",
    "title": "Method ChangeCase | Back End Documentations",
    "keywords": "Method ChangeCase ChangeCase(string, StringCaseType) Changes the case of a string based on the specified case type. Declaration public static string ChangeCase(this string source, StringExtensions.StringCaseType caseType) Parameters Type Name Description string source The source string. StringExtensions.StringCaseType caseType The case type to apply. Returns Type Description string The string with the case applied. Examples var result1 = \"THIS IS A TEST\".ChangeCase(StringCaseType.FirstCharacterUpperCase); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"this is a test\".ChangeCase(StringCaseType.TitleCase); Console.WriteLine($\"The result is: {result2}\"); var result3 = \"This is a test\".ChangeCase(StringCaseType.LowerCase); Console.WriteLine($\"The result is: {result3}\"); var result4 = \"THIS IS A TEST\".ChangeCase(StringCaseType.UpperCase); Console.WriteLine($\"The result is: {result4}\"); var result5 = \"This is a test.\".ChangeCase(StringCaseType.SentenceCapitalize); Console.WriteLine($\"The result is: {result5}\"); Exceptions Type Condition ArgumentNullException Thrown when the source string is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ConvertJsonStringAs.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ConvertJsonStringAs.html",
    "title": "Method ConvertJsonStringAs | Back End Documentations",
    "keywords": "Method ConvertJsonStringAs ConvertJsonStringAs<T>(string) Converts a JSON string to an object of the specified type. Declaration public static T? ConvertJsonStringAs<T>(this string source) Parameters Type Name Description string source The JSON string to deserialize. Returns Type Description T An object of the specified type deserialized from the JSON string, or null if the JSON string is null or cannot be deserialized. Type Parameters Name Description T The type of the object to deserialize. Examples var json = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30,\\\"address\\\":{\\\"city\\\":\\\"NY\\\"}}\"; var result = json.ConvertJsonStringAs<Person>(); Console.WriteLine($\"Name: {result.Name}, Age: {result.Age}, City: {result.Address.City}\"); Exceptions Type Condition JsonException Thrown when there is an error during deserialization."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.CountOccurrences.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.CountOccurrences.html",
    "title": "Method CountOccurrences | Back End Documentations",
    "keywords": "Method CountOccurrences CountOccurrences(string, string) Counts the number of occurrences of a substring in a string. Declaration public static int CountOccurrences(this string val, string stringToMatch) Parameters Type Name Description string val The string to search in. string stringToMatch The substring to search for. Returns Type Description int The number of occurrences of the substring in the string. Examples var text = \"I like watching movies.\"; var result = text.CountOccurrences(\"o\"); Console.WriteLine($\"The number of occurrences of 'o' in the text is: {result}\"); Exceptions Type Condition ArgumentNullException Thrown when val or stringToMatch is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.GetAlphaNumericOnly.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.GetAlphaNumericOnly.html",
    "title": "Method GetAlphaNumericOnly | Back End Documentations",
    "keywords": "Method GetAlphaNumericOnly GetAlphaNumericOnly(string) Returns a new string containing only the alphanumeric characters in the current string. Declaration public static string GetAlphaNumericOnly(this string source) Parameters Type Name Description string source The string to get alphanumeric characters from. Returns Type Description string A new string containing only alphanumeric characters. Examples var result = \"ABC123!@#\".GetAlphaNumericOnly(); Console.WriteLine(result); // Output: ABC123"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.GetNumericOnly.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.GetNumericOnly.html",
    "title": "Method GetNumericOnly | Back End Documentations",
    "keywords": "Method GetNumericOnly GetNumericOnly(string) Returns a new string containing only the numeric characters in the current string. Declaration public static string GetNumericOnly(this string source) Parameters Type Name Description string source The string to get numeric characters from. Returns Type Description string A new string containing only numeric characters. Examples var result = \"123abc456def\".GetNumericOnly(); Console.WriteLine(result); // Output: 123456"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsAlpha.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsAlpha.html",
    "title": "Method IsAlpha | Back End Documentations",
    "keywords": "Method IsAlpha IsAlpha(string) Checks if a string contains only alphabetic characters. Declaration public static bool IsAlpha(this string val) Parameters Type Name Description string val Returns Type Description bool True if the string contains only alphabetic characters, otherwise false. Examples string text = \"John\"; var result = text.IsAlpha(); Console.WriteLine($\"The result is: {result}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsAlphaNumeric.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsAlphaNumeric.html",
    "title": "Method IsAlphaNumeric | Back End Documentations",
    "keywords": "Method IsAlphaNumeric IsAlphaNumeric(string) Checks if a string is alphanumeric. Declaration public static bool IsAlphaNumeric(this string val) Parameters Type Name Description string val The string to check. Returns Type Description bool True if the string is alphanumeric, false otherwise. Examples string text = \"John123\"; var result = text.IsAlphaNumeric(); Console.WriteLine($\"The result is: {result}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsDateTime.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsDateTime.html",
    "title": "Method IsDateTime | Back End Documentations",
    "keywords": "Method IsDateTime IsDateTime(string, string) Checks if the given string can be parsed as a valid DateTime using the specified date format. Declaration public static bool IsDateTime(this string data, string dateFormat) Parameters Type Name Description string data The string to be checked. string dateFormat The date format to use for parsing. Returns Type Description bool True if the string can be parsed as a valid DateTime using the specified date format, false otherwise. Examples string data = \"2022-01-01\"; string dateFormat = \"yyyy-MM-dd\"; var result = data.IsDateTime(dateFormat); Console.WriteLine($\"The result is: {result}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsInteger.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsInteger.html",
    "title": "Method IsInteger | Back End Documentations",
    "keywords": "Method IsInteger IsInteger(string) Checks if a string value is a valid integer. Declaration public static bool IsInteger(this string val) Parameters Type Name Description string val The string value to check. Returns Type Description bool True if the string value is a valid integer, otherwise false. Examples string data = \"123\"; var result = data.IsInteger(); Console.WriteLine($\"The result is: {result}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsNumeric.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsNumeric.html",
    "title": "Method IsNumeric | Back End Documentations",
    "keywords": "Method IsNumeric IsNumeric(string) Checks if a string is numeric. Declaration public static bool IsNumeric(this string val) Parameters Type Name Description string val The string to check. Returns Type Description bool True if the string is numeric, otherwise false. Examples var result1 = \"123\".IsNumeric(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"123.456\".IsNumeric(); Console.WriteLine($\"The result is: {result2}\"); var result3 = \"123abc\".IsNumeric(); Console.WriteLine($\"The result is: {result3}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidEmailAddress.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidEmailAddress.html",
    "title": "Method IsValidEmailAddress | Back End Documentations",
    "keywords": "Method IsValidEmailAddress IsValidEmailAddress(string) Checks if the given string is a valid email address. Declaration public static bool IsValidEmailAddress(this string email) Parameters Type Name Description string email The string to check. Returns Type Description bool True if the string is a valid email address, false otherwise. Examples var result1 = \"john.doe@example.com\".IsValidEmailAddress(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"john.doe@example\".IsValidEmailAddress(); Console.WriteLine($\"The result is: {result2}\"); var result3 = \"john.doe@example.com.au\".IsValidEmailAddress(); Console.WriteLine($\"The result is: {result3}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidIPv4.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidIPv4.html",
    "title": "Method IsValidIPv4 | Back End Documentations",
    "keywords": "Method IsValidIPv4 IsValidIPv4(string) Checks if the given string is a valid IPv4 address. Declaration public static bool IsValidIPv4(this string val) Parameters Type Name Description string val The string to check. Returns Type Description bool True if the string is a valid IPv4 address, false otherwise. Examples var result1 = \"192.168.0.1\".IsValidIPv4(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"255.255.255.255\".IsValidIPv4(); Console.WriteLine($\"The result is: {result2}\"); var result3 = \"256.0.0.1\".IsValidIPv4(); Console.WriteLine($\"The result is: {result3}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidRegex.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidRegex.html",
    "title": "Method IsValidRegex | Back End Documentations",
    "keywords": "Method IsValidRegex IsValidRegex(string, string) Checks if a string value is a valid regex pattern. Declaration public static bool IsValidRegex(this string val, string pattern) Parameters Type Name Description string val The string value to be checked. string pattern The regex pattern to match against the value. Returns Type Description bool True if the value is a valid regex pattern, false otherwise. Examples var val = \"^(https?:\\\\/\\\\/)([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([\\\\/\\\\w \\\\.-]*)*\\\\/?$\"; var pattern = \"^(https?:\\\\/\\\\/)([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([\\\\/\\\\w \\\\.-]*)*\\\\/?$\"; var result = val.IsValidRegex(pattern); Console.WriteLine($\"The result is: {result}\"); Exceptions Type Condition ArgumentNullException Thrown if the value is null or empty."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidUrl.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.IsValidUrl.html",
    "title": "Method IsValidUrl | Back End Documentations",
    "keywords": "Method IsValidUrl IsValidUrl(string) Checks if the given string is a valid URL. Declaration public static bool IsValidUrl(this string text) Parameters Type Name Description string text The string to check. Returns Type Description bool True if the string is a valid URL, false otherwise. Examples var result1 = \"https://www.example.com\".IsValidUrl(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"ftp://example.com\".IsValidUrl(); Console.WriteLine($\"The result is: {result2}\"); var result3 = \"invalid url\".IsValidUrl(); Console.WriteLine($\"The result is: {result3}\");"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Left.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Left.html",
    "title": "Method Left | Back End Documentations",
    "keywords": "Method Left Left(string, int) Retrieves a specified number of characters from the beginning of a string. Declaration public static string Left(this string source, int length) Parameters Type Name Description string source The string to retrieve characters from. int length The number of characters to retrieve. Returns Type Description string The retrieved characters. Examples var result1 = \"1234567890\".Left(5); Console.WriteLine(result1); // Output: 12345 var result2 = \"1234567890\".Left(15); Console.WriteLine(result2); // Output: 1234567890"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.PadLeftByChar.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.PadLeftByChar.html",
    "title": "Method PadLeftByChar | Back End Documentations",
    "keywords": "Method PadLeftByChar PadLeftByChar(string, char, int) Pads the beginning of a string with the specified character. Declaration public static string PadLeftByChar(this string source, char chr = ' ', int length = 1) Parameters Type Name Description string source The string to pad. char chr The character to use for padding. Default is a space. int length The number of characters to pad. Default is 1. Returns Type Description string The padded string. Examples var result1 = \"123\".PadLeftByChar(); Console.WriteLine(result1); // Output: 123 var result2 = \"123\".PadLeftByChar('*', 3); Console.WriteLine(result2); // Output: ***123"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.PadRightByChar.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.PadRightByChar.html",
    "title": "Method PadRightByChar | Back End Documentations",
    "keywords": "Method PadRightByChar PadRightByChar(string, char, int) Pads the end of a string with the specified character. Declaration public static string PadRightByChar(this string source, char chr = ' ', int length = 1) Parameters Type Name Description string source The string to pad. char chr The character to use for padding. Default is a space. int length The number of characters to pad. Default is 1. Returns Type Description string The padded string. Examples var result1 = \"123\".PadRightByChar(); Console.WriteLine(result1); // Output: 123 var result2 = \"123\".PadRightByChar('*', 3); Console.WriteLine(result2); // Output: 123***"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Repeat.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Repeat.html",
    "title": "Method Repeat | Back End Documentations",
    "keywords": "Method Repeat Repeat(string, int) Repeats a string for the specified number of times. Declaration public static string Repeat(this string source, int count = 2) Parameters Type Name Description string source The string to repeat. int count The number of times to repeat the string. Default is 2. Returns Type Description string The repeated string. Examples var result1 = \"abc\".Repeat(); Console.WriteLine(result1); // Output: abcabc var result2 = \"xyz\".Repeat(3); Console.WriteLine(result2); // Output: xyzxyzxyz"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Reverse.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Reverse.html",
    "title": "Method Reverse | Back End Documentations",
    "keywords": "Method Reverse Reverse(string) Reverses the characters in the given string. Declaration public static string Reverse(this string source) Parameters Type Name Description string source The string to reverse. Returns Type Description string A new string that is equivalent to the input string, but with characters in reverse order. Examples var result1 = \"123\".Reverse(); Console.WriteLine(result1); // Output: 321 var result2 = \"Hello World!\".Reverse(); Console.WriteLine(result2); // Output: !dlroW olleH"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Right.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Right.html",
    "title": "Method Right | Back End Documentations",
    "keywords": "Method Right Right(string, int) Retrieves a specified number of characters from the end of a string. Declaration public static string Right(this string source, int length) Parameters Type Name Description string source The string to retrieve characters from. int length The number of characters to retrieve. Returns Type Description string The retrieved characters. Examples var result1 = \"1234567890\".Right(5); Console.WriteLine(result1); // Output: 67890 var result2 = \"1234567890\".Right(15); Console.WriteLine(result2); // Output: 1234567890"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.SplitTo.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.SplitTo.html",
    "title": "Method SplitTo | Back End Documentations",
    "keywords": "Method SplitTo SplitTo<T>(string, params char[]) Splits a string into an enumerable of elements of type T using the specified separator characters. Declaration public static IEnumerable<T> SplitTo<T>(this string str, params char[] separator) where T : IConvertible Parameters Type Name Description string str The string to split. char[] separator The separator characters. Returns Type Description IEnumerable<T> An enumerable of elements of type T. Type Parameters Name Description T The type to convert each element to. Examples var result1 = \"123,456,789\".SplitTo<int>(','); Console.WriteLine(string.Join(\", \", result1)); // Output: 123, 456, 789 var result2 = \"hello,world\".SplitTo<string>(','); Console.WriteLine(string.Join(\", \", result2)); // Output: hello, world Exceptions Type Condition InvalidCastException Thrown when the conversion to type T fails. SplitTo<T>(string, StringSplitOptions, params char[]) Splits a string into an enumerable of elements of type T using the specified separator and options. Declaration public static IEnumerable<T> SplitTo<T>(this string str, StringSplitOptions options, params char[] separator) where T : IConvertible Parameters Type Name Description string str The string to split. StringSplitOptions options The string split options. char[] separator The separator characters. Returns Type Description IEnumerable<T> An enumerable of elements of type T. Type Parameters Name Description T The type to convert the elements to. Examples var result1 = \"123,456,789\".SplitTo<int>(StringSplitOptions.RemoveEmptyEntries, ','); Console.WriteLine(string.Join(\", \", result1)); // Output: 123, 456, 789 var result2 = \" hello, world \".SplitTo<string>(StringSplitOptions.RemoveEmptyEntries, ','); Console.WriteLine(string.Join(\", \", result2)); // Output: hello, world Exceptions Type Condition ArgumentNullException Thrown when str is null."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.StringCaseType.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.StringCaseType.html",
    "title": "Enum StringExtensions.StringCaseType | Back End Documentations",
    "keywords": "Enum StringExtensions.StringCaseType Represents the type of string case. Namespace: IDX.Utilities.Extensions Assembly: IDX.Utilities.dll Syntax public enum StringExtensions.StringCaseType Fields Name Description FirstCharacterUpperCase Converts the first character of the string to upper case. LowerCase Converts the string to lower case. SentenceCapitalize Capitalizes the first character of each sentence in the string. TitleCase Converts the first character of each word in the string to upper case. UpperCase Converts the string to upper case. Extension Methods ObjectExtensions.CastToBoolean(object, bool) ObjectExtensions.CastToDateTime(object, DateTime) ObjectExtensions.CastToDecimal(object, decimal) ObjectExtensions.CastToDouble(object, double) ObjectExtensions.CastToInteger(object, int) ObjectExtensions.CastToString(object, string) Common.EnsureNotNull(object, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToBoolean.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToBoolean.html",
    "title": "Method ToBoolean | Back End Documentations",
    "keywords": "Method ToBoolean ToBoolean(string) Converts a string value to a boolean. Declaration public static bool ToBoolean(this string value) Parameters Type Name Description string value The string value to convert. Returns Type Description bool The converted boolean value. Examples var result1 = \"true\".ToBoolean(); Console.WriteLine(result1); // Output: True var result2 = \"false\".ToBoolean(); Console.WriteLine(result2); // Output: False var result3 = \"y\".ToBoolean(); Console.WriteLine(result3); // Output: True var result4 = \"n\".ToBoolean(); Console.WriteLine(result4); // Output: False try { var result5 = \"123\".ToBoolean(); } catch (ArgumentException ex) { Console.WriteLine(ex.Message); // Output: Invalid boolean } Exceptions Type Condition ArgumentNullException Thrown when the value is null, empty, or consists only of whitespace. ArgumentException Thrown when the value cannot be converted to a boolean."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToDecimal.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToDecimal.html",
    "title": "Method ToDecimal | Back End Documentations",
    "keywords": "Method ToDecimal ToDecimal(string) Converts a string to a decimal value. Declaration public static decimal ToDecimal(this string value) Parameters Type Name Description string value The string value to convert. Returns Type Description decimal The decimal value of the string. Examples var result1 = \"123.456\".ToDecimal(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"123abc\".ToDecimal(); try { Console.WriteLine($\"The result is: {result2}\"); } catch (FormatException ex) { Console.WriteLine(ex.Message); // Output: Input string was not in a correct format. } Exceptions Type Condition FormatException Thrown when the value cannot be parsed as a decimal."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToEnum.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToEnum.html",
    "title": "Method ToEnum | Back End Documentations",
    "keywords": "Method ToEnum ToEnum<T>(string, T) Converts a string value to an enum value of type T. Declaration public static T ToEnum<T>(this string value, T defaultValue = default) where T : struct Parameters Type Name Description string value The string value to convert. T defaultValue The default value to return if the conversion fails. Returns Type Description T The converted enum value. Type Parameters Name Description T The enum type. Examples [Flags] public enum Day { None = 0b_0000_0000, Monday = 0b_0000_0001, Tuesday = 0b_0000_0010, Wednesday = 0b_0000_0100, Thursday = 0b_0000_1000, Friday = 0b_0001_0000, Saturday = 0b_0010_0000, Sunday = 0b_0100_0000, All = Monday | Tuesday | Wednesday | Thursday | Friday | Saturday | Sunday } var value = \"Monday\"; var result = value.ToEnum(Day.None); Console.WriteLine($\"The result is: {result.ToString()}\"); Exceptions Type Condition ArgumentException Thrown when the type T is not an enum type."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToInt16.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToInt16.html",
    "title": "Method ToInt16 | Back End Documentations",
    "keywords": "Method ToInt16 ToInt16(string) Converts a string to a 16-bit signed integer. Declaration public static short ToInt16(this string value) Parameters Type Name Description string value The string value to convert. Returns Type Description short The converted 16-bit signed integer. Examples var result1 = \"123\".ToInt16(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"123abc\".ToInt16(); try { Console.WriteLine($\"The result is: {result2}\"); } catch (FormatException ex) { Console.WriteLine(ex.Message); // Output: Input string was not in a correct format. } var result3 = \"123456\".ToInt16(); try { Console.WriteLine($\"The result is: {result3}\"); } catch (OverflowException ex) { Console.WriteLine(ex.Message); // Output: Value was either too large or too small for an Int16. } Exceptions Type Condition FormatException Thrown when the value cannot be parsed as a short. OverflowException Thrown when the value represents a number that is less than MinValue or greater than MaxValue."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToInt32.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToInt32.html",
    "title": "Method ToInt32 | Back End Documentations",
    "keywords": "Method ToInt32 ToInt32(string) Converts a string representation of a number to its 32-bit signed integer equivalent. Declaration public static int ToInt32(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description int The 32-bit signed integer equivalent to the number contained in the string, or 0 if the conversion fails. Examples var result1 = \"123\".ToInt32(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"456abc\".ToInt32(); try { Console.WriteLine($\"The result is: {result2}\"); } catch (FormatException ex) { Console.WriteLine(ex.Message); // Output: Input string was not in a correct format. } var result3 = \"78901234\".ToInt32(); try { Console.WriteLine($\"The result is: {result3}\"); } catch (OverflowException ex) { Console.WriteLine(ex.Message); // Output: Value was either too large or too small for an Int32. } Exceptions Type Condition ArgumentNullException Thrown when the value is null. FormatException Thrown when the value does not consist of an optional sign followed by a sequence of digits. OverflowException Thrown when the value represents a number that is less than MinValue or greater than MaxValue."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToInt64.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.ToInt64.html",
    "title": "Method ToInt64 | Back End Documentations",
    "keywords": "Method ToInt64 ToInt64(string) Converts a string representation of a number to its 64-bit signed integer equivalent. Declaration public static long ToInt64(this string value) Parameters Type Name Description string value The string to convert. Returns Type Description long The 64-bit signed integer equivalent of the string representation, or zero if the conversion fails. Examples var result1 = \"123\".ToInt64(); Console.WriteLine($\"The result is: {result1}\"); var result2 = \"456abc\".ToInt64(); try { Console.WriteLine($\"The result is: {result2}\"); } catch (FormatException ex) { Console.WriteLine(ex.Message); // Output: Input string was not in a correct format. } var result3 = \"789012345678901\".ToInt64(); try { Console.WriteLine($\"The result is: {result3}\"); } catch (OverflowException ex) { Console.WriteLine(ex.Message); // Output: Value was either too large or too small for an Int64. }"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.TrimChars.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.TrimChars.html",
    "title": "Method TrimChars | Back End Documentations",
    "keywords": "Method TrimChars TrimChars(string, string) Removes characters from the beginning and end of the given string that match the specified regular expression pattern. Declaration public static string TrimChars(this string source, string regexPattern) Parameters Type Name Description string source The string to trim. string regexPattern The regular expression pattern to match. Returns Type Description string A new string that is equivalent to the input string, but with characters matching the specified pattern removed from the beginning and end. Examples var result1 = \" Hello World! \".TrimChars(@\"^\\s+|\\s+$\"); Console.WriteLine(result1); // Output: Hello World! var result2 = \"123abc456\".TrimChars(@\"^\\d+|\\d+$\"); Console.WriteLine(result2); // Output: abc"
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Truncate.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.Truncate.html",
    "title": "Method Truncate | Back End Documentations",
    "keywords": "Method Truncate Truncate(string, int) Truncates the input string to the specified maximum length, adding ellipsis if necessary. Declaration public static string Truncate(this string s, int maxLength) Parameters Type Name Description string s The input string to truncate. int maxLength The maximum length of the truncated string. Returns Type Description string The truncated string. Examples var result1 = \"1234567890\".Truncate(5); Console.WriteLine(result1); // Output: 12345... var result2 = \"ABC\".Truncate(10); Console.WriteLine(result2); // Output: ABC Exceptions Type Condition ArgumentNullException Thrown when the input string is null. ArgumentOutOfRangeException Thrown when the maximum length is less than or equal to zero."
  },
  "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | Back End Documentations",
    "keywords": "Class StringExtensions Extension methods for strings. Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Extensions Assembly: IDX.Utilities.dll Syntax public static class StringExtensions Methods Name Description BindWith(string, Dictionary<string, object>) Replaces placeholders in a string with corresponding values from a dictionary. ChangeCase(string, StringCaseType) Changes the case of a string based on the specified case type. ConvertJsonStringAs<T>(string) Converts a JSON string to an object of the specified type. CountOccurrences(string, string) Counts the number of occurrences of a substring in a string. GetAlphaNumericOnly(string) Returns a new string containing only the alphanumeric characters in the current string. GetNumericOnly(string) Returns a new string containing only the numeric characters in the current string. IsAlpha(string) Checks if a string contains only alphabetic characters. IsAlphaNumeric(string) Checks if a string is alphanumeric. IsDateTime(string, string) Checks if the given string can be parsed as a valid DateTime using the specified date format. IsInteger(string) Checks if a string value is a valid integer. IsNumeric(string) Checks if a string is numeric. IsValidEmailAddress(string) Checks if the given string is a valid email address. IsValidIPv4(string) Checks if the given string is a valid IPv4 address. IsValidRegex(string, string) Checks if a string value is a valid regex pattern. IsValidUrl(string) Checks if the given string is a valid URL. Left(string, int) Retrieves a specified number of characters from the beginning of a string. PadLeftByChar(string, char, int) Pads the beginning of a string with the specified character. PadRightByChar(string, char, int) Pads the end of a string with the specified character. Repeat(string, int) Repeats a string for the specified number of times. Reverse(string) Reverses the characters in the given string. Right(string, int) Retrieves a specified number of characters from the end of a string. SplitTo<T>(string, params char[]) Splits a string into an enumerable of elements of type T using the specified separator characters. SplitTo<T>(string, StringSplitOptions, params char[]) Splits a string into an enumerable of elements of type T using the specified separator and options. ToBoolean(string) Converts a string value to a boolean. ToDecimal(string) Converts a string to a decimal value. ToEnum<T>(string, T) Converts a string value to an enum value of type T. ToInt16(string) Converts a string to a 16-bit signed integer. ToInt32(string) Converts a string representation of a number to its 32-bit signed integer equivalent. ToInt64(string) Converts a string representation of a number to its 64-bit signed integer equivalent. TrimChars(string, string) Removes characters from the beginning and end of the given string that match the specified regular expression pattern. Truncate(string, int) Truncates the input string to the specified maximum length, adding ellipsis if necessary."
  },
  "api/idc.utility/IDX.Utilities.Extensions.html": {
    "href": "api/idc.utility/IDX.Utilities.Extensions.html",
    "title": "Namespace IDX.Utilities.Extensions | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Extensions Classes HttpClientExtensions Provides extension methods for the HttpClient class. JObjectExtensions Extension methods for Newtonsoft.Json.Linq.JToken. ObjectExtensions Provides extension methods for objects. StringExtensions Extension methods for strings. Enums StringExtensions.StringCaseType Represents the type of string case."
  },
  "api/idc.utility/IDX.Utilities.MemoryCacheService.-ctor.html": {
    "href": "api/idc.utility/IDX.Utilities.MemoryCacheService.-ctor.html",
    "title": "Constructor MemoryCacheService | Back End Documentations",
    "keywords": "Constructor MemoryCacheService MemoryCacheService(int, int) Initializes a new instance of the MemoryCacheService class. Declaration public MemoryCacheService(int absoluteExpirationValue, int slidingExpirationValue) Parameters Type Name Description int absoluteExpirationValue The absolute expiration value in seconds. int slidingExpirationValue The sliding expiration value in seconds. Examples var memoryCache = new MemoryCacheService(absoluteExpirationValue: 3600, slidingExpirationValue: 1800); memoryCache.Add(\"mykey\", \"myvalue\");"
  },
  "api/idc.utility/IDX.Utilities.MemoryCacheService.Add.html": {
    "href": "api/idc.utility/IDX.Utilities.MemoryCacheService.Add.html",
    "title": "Method Add | Back End Documentations",
    "keywords": "Method Add Add<T>(string, T, CacheItemPriority) Adds a value to the cache with the specified key and priority. Declaration public void Add<T>(string key, T value, CacheItemPriority priority) Parameters Type Name Description string key The key identifying the value in the cache. T value The value to be added to the cache. CacheItemPriority priority The priority of the cached value. Type Parameters Name Description T The type of the value to be added to the cache. Examples var memoryCache = new MemoryCacheService(); memoryCache.Add(\"mykey\", \"myvalue\", CacheItemPriority.Normal); Exceptions Type Condition ArgumentNullException Thrown when key is null."
  },
  "api/idc.utility/IDX.Utilities.MemoryCacheService.Get.html": {
    "href": "api/idc.utility/IDX.Utilities.MemoryCacheService.Get.html",
    "title": "Method Get | Back End Documentations",
    "keywords": "Method Get Get<T>(string) Retrieves a value from the memory cache based on the specified key. Declaration public T Get<T>(string key) Parameters Type Name Description string key The key of the value to retrieve. Returns Type Description T The retrieved value if it exists in the cache; otherwise, the default value of type T. Type Parameters Name Description T The type of the value to retrieve. Examples var memoryCache = new MemoryCacheService(); memoryCache.Add(\"mykey\", \"myvalue\"); var result = memoryCache.Get<string>(\"mykey\"); Console.WriteLine(result); // Output: myvalue"
  },
  "api/idc.utility/IDX.Utilities.MemoryCacheService.Remove.html": {
    "href": "api/idc.utility/IDX.Utilities.MemoryCacheService.Remove.html",
    "title": "Method Remove | Back End Documentations",
    "keywords": "Method Remove Remove(string) Removes an item from the cache using the specified key. Declaration public void Remove(string key) Parameters Type Name Description string key The key of the item to remove. Examples var memoryCache = new MemoryCacheService(); memoryCache.Add(\"mykey\", \"myvalue\"); memoryCache.Remove(\"mykey\");"
  },
  "api/idc.utility/IDX.Utilities.MemoryCacheService.html": {
    "href": "api/idc.utility/IDX.Utilities.MemoryCacheService.html",
    "title": "Class MemoryCacheService | Back End Documentations",
    "keywords": "Class MemoryCacheService Initializes a new instance of the MemoryCacheService class. Inheritance object MemoryCacheService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities Assembly: IDX.Utilities.dll Syntax public class MemoryCacheService Examples var memoryCache = new MemoryCacheService(absoluteExpirationValue: 3600, slidingExpirationValue: 1800); memoryCache.Add(\"mykey\", \"myvalue\"); Constructors Name Description MemoryCacheService(int, int) Initializes a new instance of the MemoryCacheService class. Methods Name Description Add<T>(string, T, CacheItemPriority) Adds a value to the cache with the specified key and priority. Get<T>(string) Retrieves a value from the memory cache based on the specified key. Remove(string) Removes an item from the cache using the specified key. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.ChangeMessage.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.ChangeMessage.html",
    "title": "Method ChangeMessage | Back End Documentations",
    "keywords": "Method ChangeMessage ChangeMessage(string?) Changes the message associated with the API response. Declaration public virtual ApiResponse ChangeMessage(string? message) Parameters Type Name Description string message The new message to be set. Returns Type Description ApiResponse The modified API response model. Examples var response = new ApiResponse(); response = response.ChangeMessage(\"Failed to execute the request.\"); Console.WriteLine(response.Message); // Output: Failed to execute the request. ChangeMessage(JToken, string) Changes the value of the message property based on the provided languageToken and propertyName. Declaration public virtual ApiResponse ChangeMessage(JToken languageToken, string propertyName) Parameters Type Name Description JToken languageToken The languageToken containing the message value. string propertyName The name of the property to retrieve from the languageToken. Returns Type Description ApiResponse The updated ApiResponse instance. Examples var response = new ApiResponse(); var languageToken = JToken.Parse(\"{\\\"Message\\\":\\\"Failed to execute the request.\\\"}\"); response = response.ChangeMessage(languageToken, \"Message\"); Console.WriteLine(response.Message); // Output: Failed to execute the request. ChangeMessage(Exception, bool) Changes the message of the API response based on the given exception. Declaration public virtual ApiResponse ChangeMessage(Exception exception, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. bool includeStackTrace Whether to include the exception stack trace in the message. Returns Type Description ApiResponse The modified API response. Examples var response = new ApiResponse(); var exception = new Exception(\"Failed to execute the request.\"); response = response.ChangeMessage(exception); Console.WriteLine(response.Message); // Output: Failed to execute the request. response = response.ChangeMessage(exception, includeStackTrace: true); Console.WriteLine(response.Message); // Output: Failed to execute the request. ChangeMessage(Exception, SystemLogging, bool) Changes the message of the API response based on the given exception. Declaration public virtual ApiResponse ChangeMessage(Exception exception, SystemLogging logging, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. SystemLogging logging The system logging instance. bool includeStackTrace Indicates whether to include the stack trace in the message. Returns Type Description ApiResponse The modified API response. Examples var response = new ApiResponse(); var exception = new Exception(\"Failed to execute the request.\"); var logging = new SystemLogging(\"UnitTest\"); response = response.ChangeMessage(exception, logging); Console.WriteLine(response.Message); // Output: Failed to execute the request. response = response.ChangeMessage(exception, logging, includeStackTrace: true); Console.WriteLine(response.Message); // Output: Failed to execute the request. ChangeMessage(Exception, JToken, bool) Changes the message of the API response based on the provided exception and language token. Declaration public virtual ApiResponse ChangeMessage(Exception exception, JToken languageToken, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. JToken languageToken The language token used to retrieve the message value. bool includeStackTrace Whether to include the exception stack trace in the message. Returns Type Description ApiResponse The modified API response. Examples var response = new ApiResponse(); var exception = new Exception(\"Failed to execute the request.\"); var languageToken = JToken.Parse(\"{\\\"Failed to execute the request\\\":\\\"Gagal mengeksekusi perintah.\\\"}\"); response = response.ChangeMessage(exception, languageToken); Console.WriteLine(response.Message); // Output: Gagal mengeksekusi perintah. response = response.ChangeMessage(exception, languageToken, includeStackTrace: true); Console.WriteLine(response.Message); // Output: Gagal mengeksekusi perintah. @ ChangeMessage(Exception, JToken, SystemLogging, bool) Changes the message of the API response based on the provided exception and language token. Declaration public virtual ApiResponse ChangeMessage(Exception exception, JToken languageToken, SystemLogging logging, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. JToken languageToken The language token used to retrieve the message value. SystemLogging logging The system logging instance. bool includeStackTrace Whether to include the exception stack trace in the message. Returns Type Description ApiResponse The modified API response. Examples var response = new ApiResponse(); var exception = new Exception(\"Failed to execute the request.\"); var languageToken = JToken.Parse(\"{\\\"Failed to execute the request\\\":\\\"Gagal mengeksekusi perintah.\\\"}\"); var logging = new SystemLogging(); response = response.ChangeMessage(exception, languageToken, logging); Console.WriteLine(response.Message); // Output: Gagal mengeksekusi perintah. response = response.ChangeMessage(exception, languageToken, logging, includeStackTrace: true); Console.WriteLine(response.Message); // Output: Gagal mengeksekusi perintah. @"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.ChangeStatus.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.ChangeStatus.html",
    "title": "Method ChangeStatus | Back End Documentations",
    "keywords": "Method ChangeStatus ChangeStatus(string?) Changes the status of the API response. Declaration public virtual ApiResponse ChangeStatus(string? status) Parameters Type Name Description string status The new status to be set. Returns Type Description ApiResponse The modified API response model. Examples var response = new ApiResponse(); response = response.ChangeStatus(\"Failed\"); Console.WriteLine(response.Status); // Output: Failed ChangeStatus(JToken, string) Changes the status of the API based on the provided language token and property name. Declaration public virtual ApiResponse ChangeStatus(JToken languageToken, string propertyName) Parameters Type Name Description JToken languageToken The language token to retrieve the status value from. string propertyName The name of the property to retrieve the status value from. Returns Type Description ApiResponse The modified ApiResponse object. Examples var response = new ApiResponse(); var languageToken = JToken.Parse(\"{\\\"Status\\\":\\\"Failed\\\"}\"); response = response.ChangeStatus(languageToken, \"Status\"); Console.WriteLine(response.Status); // Output: Failed"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.Message.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.Message.html",
    "title": "Property Message | Back End Documentations",
    "keywords": "Property Message Message Gets or sets the message. Declaration public string? Message { get; } Property Value Type Description string The message. Remarks The default value is \"API processing is completed.\". Examples var response = new ApiResponse(); response.Message = \"API processing is done successfully.\"; Console.WriteLine(response.Message); // Output: API processing is done successfully."
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.Status.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.Status.html",
    "title": "Property Status | Back End Documentations",
    "keywords": "Property Status Status Gets or sets the status. Declaration public string? Status { get; } Property Value Type Description string The status. Remarks The default value is \"Success\". Examples var response = new ApiResponse(); response.Status = \"Failed\"; Console.WriteLine(response.Status); // Output: Failed"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponse.html",
    "title": "Class ApiResponse | Back End Documentations",
    "keywords": "Class ApiResponse Represents the model for an API response. Inheritance object ApiResponse ApiResponseData<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.API Assembly: IDX.Utilities.dll Syntax public class ApiResponse Examples var response = new ApiResponse { Status = \"Success\", Message = \"The operation completed successfully.\", Data = JsonConvert.DeserializeObject<JObject>(\"{\\\"name\\\":\\\"John Doe\\\"}\") }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation completed successfully.\",\"data\":{\"name\":\"John Doe\"}} Properties Name Description Message Gets or sets the message. Status Gets or sets the status. Methods Name Description ChangeMessage(JToken, string) Changes the value of the message property based on the provided languageToken and propertyName. ChangeMessage(Exception, SystemLogging, bool) Changes the message of the API response based on the given exception. ChangeMessage(Exception, JToken, SystemLogging, bool) Changes the message of the API response based on the provided exception and language token. ChangeMessage(Exception, JToken, bool) Changes the message of the API response based on the provided exception and language token. ChangeMessage(Exception, bool) Changes the message of the API response based on the given exception. ChangeMessage(string?) Changes the message associated with the API response. ChangeStatus(JToken, string) Changes the status of the API based on the provided language token and property name. ChangeStatus(string?) Changes the status of the API response. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.ChangeData.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.ChangeData.html",
    "title": "Method ChangeData | Back End Documentations",
    "keywords": "Method ChangeData ChangeData(T?) Changes the data stored in the API response. Declaration public virtual ApiResponseData<T> ChangeData(T? data) Parameters Type Name Description T data The new data to be stored. Returns Type Description ApiResponseData<T> The modified API response object. Examples ApiResponseData<int> response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; response = response.ChangeData(2); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation completed successfully.\",\"data\":2}"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.ChangeMessage.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.ChangeMessage.html",
    "title": "Method ChangeMessage | Back End Documentations",
    "keywords": "Method ChangeMessage ChangeMessage(string?) Changes the message associated with the API response data model. Declaration public override ApiResponseData<T> ChangeMessage(string? message) Parameters Type Name Description string message The new message to be set. Returns Type Description ApiResponseData<T> The modified API response data model. Overrides ApiResponse.ChangeMessage(string?) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; response = response.ChangeMessage(\"The operation failed.\"); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation failed.\",\"data\":1} ChangeMessage(JToken, string) Changes the message based on the provided language token and property name. Declaration public override ApiResponseData<T> ChangeMessage(JToken languageToken, string propertyName) Parameters Type Name Description JToken languageToken The language token. string propertyName The property name. Returns Type Description ApiResponseData<T> The updated ApiResponseData instance. Overrides ApiResponse.ChangeMessage(JToken, string) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; var languageToken = JToken.Parse(\"{\\\"Message\\\":\\\"The operation completed with errors.\\\"}\"); response = response.ChangeMessage(languageToken, \"Message\"); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation completed with errors.\",\"data\":1} ChangeMessage(Exception, bool) Changes the message of the API response. Declaration public override ApiResponseData<T> ChangeMessage(Exception exception, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. bool includeStackTrace Whether to include the exception stack trace in the message. Returns Type Description ApiResponseData<T> The modified API response. Overrides ApiResponse.ChangeMessage(Exception, bool) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; var exception = new Exception(\"The operation failed.\"); response = response.ChangeMessage(exception); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation failed.\",\"data\":1} ChangeMessage(Exception, SystemLogging, bool) Changes the message of the API response based on the given exception. Declaration public override ApiResponseData<T> ChangeMessage(Exception exception, SystemLogging logging, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. SystemLogging logging The system logging instance. bool includeStackTrace Indicates whether to include the stack trace in the message. Returns Type Description ApiResponseData<T> The modified API response. Overrides ApiResponse.ChangeMessage(Exception, SystemLogging, bool) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; var exception = new Exception(\"The operation failed.\"); var logging = new SystemLogging(); response = response.ChangeMessage(exception, logging); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation failed.\",\"data\":1} ChangeMessage(Exception, JToken, bool) Changes the message of the API response based on the provided exception and language token. Declaration public override ApiResponseData<T> ChangeMessage(Exception exception, JToken languageToken, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. JToken languageToken The language token used to retrieve the message value. bool includeStackTrace Whether to include the exception stack trace in the message. Returns Type Description ApiResponseData<T> The modified API response. Overrides ApiResponse.ChangeMessage(Exception, JToken, bool) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; var exception = new Exception(\"The operation failed.\"); var languageToken = JToken.Parse(\"{\\\"langToken\\\":{\\\"Failed\\\":\\\"The operation failed.\\\"}}\"); response = response.ChangeMessage(exception, languageToken); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation failed.\",\"data\":1} ChangeMessage(Exception, JToken, SystemLogging, bool) Changes the message of the API response based on the given exception, language token, and logging instance. Declaration public override ApiResponseData<T> ChangeMessage(Exception exception, JToken languageToken, SystemLogging logging, bool includeStackTrace = false) Parameters Type Name Description Exception exception The exception that occurred. JToken languageToken The language token used to retrieve the message value. SystemLogging logging The system logging instance. bool includeStackTrace Whether to include the exception stack trace in the message. Returns Type Description ApiResponseData<T> The modified API response. Overrides ApiResponse.ChangeMessage(Exception, JToken, SystemLogging, bool) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; var exception = new Exception(\"The operation failed.\"); var languageToken = JToken.Parse(\"{\\\"langToken\\\":{\\\"Failed\\\":\\\"The operation failed.\\\"}}\"); var systemLogging = new SystemLogging(); response = response.ChangeMessage(exception, languageToken, systemLogging); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation failed.\",\"data\":1}"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.ChangeStatus.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.ChangeStatus.html",
    "title": "Method ChangeStatus | Back End Documentations",
    "keywords": "Method ChangeStatus ChangeStatus(string?) Changes the status of the API response data model. Declaration public override ApiResponseData<T> ChangeStatus(string? status) Parameters Type Name Description string status The new status to be set. Returns Type Description ApiResponseData<T> The modified API response data model. Overrides ApiResponse.ChangeStatus(string?) Examples ApiResponseData<int> response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; response = response.ChangeStatus(\"Failed\"); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Failed\",\"message\":\"The operation completed successfully.\",\"data\":1} ChangeStatus(JToken, string) Changes the status of the API response based on the provided language token and property name. Declaration public override ApiResponseData<T> ChangeStatus(JToken languageToken, string propertyName) Parameters Type Name Description JToken languageToken The language token used to select the property value. string propertyName The name of the property to be selected. Returns Type Description ApiResponseData<T> The modified API response. Overrides ApiResponse.ChangeStatus(JToken, string) Examples var response = new ApiResponseData<int> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = 1 }; var languageToken = JToken.Parse(\"{\\\"Status\\\":\\\"Failed\\\"}\"); response = response.ChangeStatus(languageToken, \"Status\"); string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Failed\",\"message\":\"The operation completed successfully.\",\"data\":1}"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.Data.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.Data.html",
    "title": "Property Data | Back End Documentations",
    "keywords": "Property Data Data Gets or sets the data of type T. Declaration public T? Data { get; } Property Value Type Description T The data of type T. Examples ApiResponseData<string> response = new ApiResponseData<string> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = \"Hello World!\" }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation completed successfully.\",\"data\":\"Hello World!\"}"
  },
  "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.ApiResponseData-1.html",
    "title": "Class ApiResponseData<T> | Back End Documentations",
    "keywords": "Class ApiResponseData<T> Represents a generic API response data model that inherits from the base API response model. Inheritance object ApiResponse ApiResponseData<T> Inherited Members ApiResponse.Status ApiResponse.Message object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.API Assembly: IDX.Utilities.dll Syntax public class ApiResponseData<T> : ApiResponse Type Parameters Name Description T The type of the data. Examples ApiResponseData<string> response = new ApiResponseData<string> { Status = \"Success\", Message = \"The operation completed successfully.\", Data = \"Hello World!\" }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"status\":\"Success\",\"message\":\"The operation completed successfully.\",\"data\":\"Hello World!\"} Properties Name Description Data Gets or sets the data of type T. Methods Name Description ChangeData(T?) Changes the data stored in the API response. ChangeMessage(JToken, string) Changes the message based on the provided language token and property name. ChangeMessage(Exception, SystemLogging, bool) Changes the message of the API response based on the given exception. ChangeMessage(Exception, JToken, SystemLogging, bool) Changes the message of the API response based on the given exception, language token, and logging instance. ChangeMessage(Exception, JToken, bool) Changes the message of the API response based on the provided exception and language token. ChangeMessage(Exception, bool) Changes the message of the API response. ChangeMessage(string?) Changes the message associated with the API response data model. ChangeStatus(JToken, string) Changes the status of the API response based on the provided language token and property name. ChangeStatus(string?) Changes the status of the API response data model. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.API.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.API.html",
    "title": "Namespace IDX.Utilities.Models.API | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Models.API Classes ApiResponse Represents the model for an API response. ApiResponseData<T> Represents a generic API response data model that inherits from the base API response model."
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.BTOrderType.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.BTOrderType.html",
    "title": "Enum BTRequest.BTOrderType | Back End Documentations",
    "keywords": "Enum BTRequest.BTOrderType Represents the order type for sorting. Namespace: IDX.Utilities.Models.BootstrapTable Assembly: IDX.Utilities.dll Syntax public enum BTRequest.BTOrderType Remarks The value can be either \"asc\" or \"desc\". Examples BTRequest request = new BTRequest { Order = BTRequest.BTOrderType.Asc }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"order\":\"asc\"} Fields Name Description Asc Sort in ascending order. Desc Sort in descending order. Extension Methods ObjectExtensions.CastToBoolean(object, bool) ObjectExtensions.CastToDateTime(object, DateTime) ObjectExtensions.CastToDecimal(object, decimal) ObjectExtensions.CastToDouble(object, double) ObjectExtensions.CastToInteger(object, int) ObjectExtensions.CastToString(object, string) Common.EnsureNotNull(object, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Limit.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Limit.html",
    "title": "Property Limit | Back End Documentations",
    "keywords": "Property Limit Limit Gets or sets the limit for paginating the table data. Declaration public int Limit { get; set; } Property Value Type Description int Remarks The limit will be used to paginate the table data. Examples BTRequest request = new BTRequest { Limit = 5, }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"limit\":5}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Offset.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Offset.html",
    "title": "Property Offset | Back End Documentations",
    "keywords": "Property Offset Offset Gets or sets the offset for paginating the table data. Declaration public int Offset { get; set; } Property Value Type Description int Remarks The offset will be used to paginate the table data. Examples BTRequest request = new BTRequest { Offset = 10, }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"offset\":10}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Order.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Order.html",
    "title": "Property Order | Back End Documentations",
    "keywords": "Property Order Order Gets or sets the sort order for sorting the table data. Declaration public BTRequest.BTOrderType Order { get; set; } Property Value Type Description BTRequest.BTOrderType Remarks The sort order will be used to sort the table data. Examples BTRequest request = new BTRequest { Sort = \"name\", Order = BTRequest.BTOrderType.Asc }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"sort\":\"name\",\"order\":\"asc\"}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Search.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Search.html",
    "title": "Property Search | Back End Documentations",
    "keywords": "Property Search Search Gets or sets the search query for filtering the table data. Declaration public string? Search { get; set; } Property Value Type Description string Remarks The search query will be used to filter the table data based on the values of the columns. Examples BTRequest request = new BTRequest { Search = \"John\" }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"search\":\"John\"}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Sort.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.Sort.html",
    "title": "Property Sort | Back End Documentations",
    "keywords": "Property Sort Sort Gets or sets the sort column for sorting the table data. Declaration public string? Sort { get; set; } Property Value Type Description string Remarks The sort column will be used to sort the table data. Examples BTRequest request = new BTRequest { Sort = \"name\" }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"sort\":\"name\"}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTRequest.html",
    "title": "Class BTRequest | Back End Documentations",
    "keywords": "Class BTRequest Represents a model for Bootstrap-Table requests. Inheritance object BTRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.BootstrapTable Assembly: IDX.Utilities.dll Syntax public class BTRequest Examples BTRequest request = new BTRequest { Offset = 0, Limit = 10, Sort = \"id\", Order = BTRequest.BTOrderType.Asc }; string json = JsonConvert.SerializeObject(request); Console.WriteLine(json); // Output: {\"offset\":0,\"limit\":10,\"sort\":\"id\",\"order\":\"asc\"} Properties Name Description Limit Gets or sets the limit for paginating the table data. Offset Gets or sets the offset for paginating the table data. Order Gets or sets the sort order for sorting the table data. Search Gets or sets the search query for filtering the table data. Sort Gets or sets the sort column for sorting the table data. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.Rows.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.Rows.html",
    "title": "Property Rows | Back End Documentations",
    "keywords": "Property Rows Rows Gets or sets the data items. Declaration public T? Rows { get; set; } Property Value Type Description T Examples BTResponse<string> response = new BTResponse<string> { Total = 10, Rows = new[] { \"row1\", \"row2\" } }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"total\":10,\"rows\":[\"row1\",\"row2\"]}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.Total.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.Total.html",
    "title": "Property Total | Back End Documentations",
    "keywords": "Property Total Total Gets or sets the total number of records. Declaration public int Total { get; set; } Property Value Type Description int Examples BTResponse<string> response = new BTResponse<string> { Total = 10, Rows = new[] { \"row1\", \"row2\" } }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"total\":10,\"rows\":[\"row1\",\"row2\"]}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.TotalNotFiltered.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.TotalNotFiltered.html",
    "title": "Property TotalNotFiltered | Back End Documentations",
    "keywords": "Property TotalNotFiltered TotalNotFiltered Gets or sets the filtered number of records. Declaration public int TotalNotFiltered { get; set; } Property Value Type Description int Examples BTResponse<string> response = new BTResponse<string> { Total = 10, TotalNotFiltered = 20, Rows = new[] { \"row1\", \"row2\" } }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"total\":10,\"totalNotFiltered\":20,\"rows\":[\"row1\",\"row2\"]}"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.BTResponse-1.html",
    "title": "Class BTResponse<T> | Back End Documentations",
    "keywords": "Class BTResponse<T> Represents a model for Bootstrap-Table responses. Inheritance object BTResponse<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.BootstrapTable Assembly: IDX.Utilities.dll Syntax public class BTResponse<T> Type Parameters Name Description T Examples BTResponse<string> response = new BTResponse<string> { Total = 10, Rows = new[] { \"row1\", \"row2\" } }; string json = JsonConvert.SerializeObject(response); Console.WriteLine(json); // Output: {\"total\":10,\"rows\":[\"row1\",\"row2\"]} Properties Name Description Rows Gets or sets the data items. Total Gets or sets the total number of records. TotalNotFiltered Gets or sets the filtered number of records. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.BootstrapTable.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.BootstrapTable.html",
    "title": "Namespace IDX.Utilities.Models.BootstrapTable | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Models.BootstrapTable Classes BTRequest Represents a model for Bootstrap-Table requests. BTResponse<T> Represents a model for Bootstrap-Table responses. Enums BTRequest.BTOrderType Represents the order type for sorting."
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Database.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Database.html",
    "title": "Property Database | Back End Documentations",
    "keywords": "Property Database Database Gets or sets the database name for the connection. Declaration [Required(ErrorMessage = \"Database is required\")] public string? Database { get; set; } Property Value Type Description string Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.FromConnString.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.FromConnString.html",
    "title": "Method FromConnString | Back End Documentations",
    "keywords": "Method FromConnString FromConnString(string) Parses a connection string and populates the properties of this class. Declaration public virtual CommonConnectionString FromConnString(string connectionString) Parameters Type Name Description string connectionString The connection string to parse. Returns Type Description CommonConnectionString The current instance of the CommonConnectionString class. Examples var connectionString = \"User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=2;MaxPoolSize=50\"; var constring = new CommonConnectionString(); constring.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=2;MaxPoolSize=50;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Host.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Host.html",
    "title": "Property Host | Back End Documentations",
    "keywords": "Property Host Host Gets or sets the host for the database connection. Default value is \"localhost\". Declaration [RegularExpression(\"^(localhost|\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})$\", ErrorMessage = \"Invalid host format\")] public string? Host { get; set; } Property Value Type Description string Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.IntegratedSecurity.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.IntegratedSecurity.html",
    "title": "Property IntegratedSecurity | Back End Documentations",
    "keywords": "Property IntegratedSecurity IntegratedSecurity Gets or sets a value indicating whether integrated security is used for the connection. Default value is true. Declaration public bool? IntegratedSecurity { get; set; } Property Value Type Description bool? Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.MaxPoolSize.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.MaxPoolSize.html",
    "title": "Property MaxPoolSize | Back End Documentations",
    "keywords": "Property MaxPoolSize MaxPoolSize Gets or sets the maximum pool size for connection pooling. Default value is 1000. Declaration public int MaxPoolSize { get; set; } Property Value Type Description int Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 2, MaxPoolSize = 50 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=2;MaxPoolSize=50;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.MinPoolSize.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.MinPoolSize.html",
    "title": "Property MinPoolSize | Back End Documentations",
    "keywords": "Property MinPoolSize MinPoolSize Gets or sets the minimum pool size for connection pooling. Default value is 1. Declaration public int MinPoolSize { get; set; } Property Value Type Description int Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 2, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=2;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Password.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Password.html",
    "title": "Property Password | Back End Documentations",
    "keywords": "Property Password Password Gets or sets the password for the database connection. Declaration [Required(ErrorMessage = \"Password is required\")] public string? Password { get; set; } Property Value Type Description string Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Pooling.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Pooling.html",
    "title": "Property Pooling | Back End Documentations",
    "keywords": "Property Pooling Pooling Gets or sets a value indicating whether connection pooling is enabled. Default value is true. Declaration public bool? Pooling { get; set; } Property Value Type Description bool? Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Port.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Port.html",
    "title": "Property Port | Back End Documentations",
    "keywords": "Property Port Port Gets or sets the port for the database connection. Default value is 5432. Declaration [Range(1024, 65535, ErrorMessage = \"Port must be between 1024 and 65535\")] public int? Port { get; set; } Property Value Type Description int? Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Username.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.Username.html",
    "title": "Property Username | Back End Documentations",
    "keywords": "Property Username Username Gets or sets the username for the database connection. Declaration [Required(ErrorMessage = \"Username is required\")] public string? Username { get; set; } Property Value Type Description string Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"myPassword\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = CommonConnectionString.FromConnString(connectionString); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10;"
  },
  "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CommonConnectionString.html",
    "title": "Class CommonConnectionString | Back End Documentations",
    "keywords": "Class CommonConnectionString Represents a connection string for a database. Inheritance object CommonConnectionString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models Assembly: IDX.Utilities.dll Syntax public class CommonConnectionString Examples var connectionString = new CommonConnectionString { Username = \"myuser\", Password = \"enc:mysecretkey:mysecretkey:MzIxMTg5NDU3ODEzMjM1NzY1ODU=\", Host = \"localhost\", Port = 5432, Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; var constring = ConstringBuilder(connectionString, \"mysecretkey\", new byte[] { 0x01, 0x02 }); Console.WriteLine(constring); // Output: User ID=myuser;Password=myPassword;HOST=localhost;Port=5432;Database=mydb;Integrated Security=False;Pooling=True;MinPoolSize=1;MaxPoolSize=10; Properties Name Description Database Gets or sets the database name for the connection. Host Gets or sets the host for the database connection. Default value is \"localhost\". IntegratedSecurity Gets or sets a value indicating whether integrated security is used for the connection. Default value is true. MaxPoolSize Gets or sets the maximum pool size for connection pooling. Default value is 1000. MinPoolSize Gets or sets the minimum pool size for connection pooling. Default value is 1. Password Gets or sets the password for the database connection. Pooling Gets or sets a value indicating whether connection pooling is enabled. Default value is true. Port Gets or sets the port for the database connection. Default value is 5432. Username Gets or sets the username for the database connection. Methods Name Description FromConnString(string) Parses a connection string and populates the properties of this class. Extension Methods Common.EnsureModel(CommonConnectionString) ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Host.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Host.html",
    "title": "Property Host | Back End Documentations",
    "keywords": "Property Host Host Gets or sets the host address for the Couchbase server. The connection string should start with 'couchbase://'. Declaration [RegularExpression(\"^couchbase://.*\", ErrorMessage = \"Invalid Couchbase connection string.\")] public string? Host { get; set; } Property Value Type Description string Remarks This property is validated with a regular expression to ensure it starts with 'couchbase://'. The default value is 'couchbase://localhost'. var connectionString = new CouchBaseConnectionString { Host = \"couchbase://localhost\", Username = \"Administrator\", Password = \"password\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Password.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Password.html",
    "title": "Property Password | Back End Documentations",
    "keywords": "Property Password Password Gets or sets the password for Couchbase server authentication. Declaration [Required(ErrorMessage = \"Password is required\")] public string? Password { get; set; } Property Value Type Description string Remarks This field is required and must be provided for successful authentication. var connectionString = new CouchBaseConnectionString { Host = \"couchbase://localhost\", Username = \"Administrator\", Password = \"password\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Port.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Port.html",
    "title": "Property Port | Back End Documentations",
    "keywords": "Property Port Port Gets or sets the port on which the Couchbase server is running. Declaration [Range(1, 65535, ErrorMessage = \"Port must be between 1 and 65535\")] public int? Port { get; set; } Property Value Type Description int? Remarks The port must be within the range of 1 to 65535. The default value is 8091. var connectionString = new CouchBaseConnectionString { Host = \"couchbase://localhost\", Username = \"Administrator\", Password = \"password\", Port = 8092 };"
  },
  "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Username.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.Username.html",
    "title": "Property Username | Back End Documentations",
    "keywords": "Property Username Username Gets or sets the username for Couchbase server authentication. Declaration [Required(ErrorMessage = \"Username is required\")] public string? Username { get; set; } Property Value Type Description string Remarks This field is required and must be provided for successful authentication. var connectionString = new CouchBaseConnectionString { Host = \"couchbase://localhost\", Username = \"Administrator\", Password = \"password\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.CouchBaseConnectionString.html",
    "title": "Class CouchBaseConnectionString | Back End Documentations",
    "keywords": "Class CouchBaseConnectionString Represents the connection string details for a Couchbase server. Inheritance object CouchBaseConnectionString Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models Assembly: IDX.Utilities.dll Syntax public class CouchBaseConnectionString Examples CouchBaseConnectionString connectionString = new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\" }; Properties Name Description Host Gets or sets the host address for the Couchbase server. The connection string should start with 'couchbase://'. Password Gets or sets the password for Couchbase server authentication. Port Gets or sets the port on which the Couchbase server is running. Username Gets or sets the username for Couchbase server authentication. Extension Methods Common.EnsureModel(CouchBaseConnectionString) ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.BTRequest.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.BTRequest.html",
    "title": "Property BTRequest | Back End Documentations",
    "keywords": "Property BTRequest BTRequest Gets or sets the Bootstrap Table request object. Declaration public BTRequest? BTRequest { get; set; } Property Value Type Description BTRequest Remarks This property is used to specify the Bootstrap Table request object. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table, Schema = \"public\", TargetName = \"mytable\", BTRequest = new BTRequest { Page = 1, Limit = 10, Sort = \"id\", Order = BTRequest.BTOrderType.Asc } };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.ExcludedSearchFields.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.ExcludedSearchFields.html",
    "title": "Property ExcludedSearchFields | Back End Documentations",
    "keywords": "Property ExcludedSearchFields ExcludedSearchFields Gets or sets the excluded search fields. Declaration public string[]? ExcludedSearchFields { get; set; } Property Value Type Description string[] Remarks This property is used to specify the fields that should be excluded from the search. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table, Schema = \"public\", TargetName = \"mytable\", Fields = new[] { \"field1\", \"field2\", \"field3\" }, ExcludedSearchFields = new[] { \"field2\", \"field3\" } };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.Fields.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.Fields.html",
    "title": "Property Fields | Back End Documentations",
    "keywords": "Property Fields Fields Gets or sets the fields to be fetched. Declaration public string[]? Fields { get; set; } Property Value Type Description string[] Remarks This property is used to specify the fields to be fetched from the data source. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table, Schema = \"public\", TargetName = \"mytable\", Fields = new[] { \"field1\", \"field2\" } };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.SPParameters.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.SPParameters.html",
    "title": "Property SPParameters | Back End Documentations",
    "keywords": "Property SPParameters SPParameters Gets or sets the stored procedure parameters. Declaration public SPParameter[]? SPParameters { get; set; } Property Value Type Description SPParameter[] Remarks This property is used to specify the stored procedure parameters. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.StoreProcedure, TargetName = \"myProc\", SPParameters = new[] { new SPParameter { Name = \"name\", Value = \"John Doe\", DataType = NpgsqlDbType.Varchar }, new SPParameter { Name = \"age\", Value = 25, DataType = NpgsqlDbType.Integer } } };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.Schema.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.Schema.html",
    "title": "Property Schema | Back End Documentations",
    "keywords": "Property Schema Schema Gets or sets the schema name. Declaration [Required(ErrorMessage = \"Schema is required\")] public string? Schema { get; set; } Property Value Type Description string Remarks This property is used to specify the schema name of the data source. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table, Schema = \"public\", TargetName = \"mytable\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.Source.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.Source.html",
    "title": "Property Source | Back End Documentations",
    "keywords": "Property Source Source Gets or sets the source type of the data. Declaration public PagingRequest.SourceType Source { get; set; } Property Value Type Description PagingRequest.SourceType Remarks This property is used to specify the source of the data, either a table or a stored procedure. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.SourceType.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.SourceType.html",
    "title": "Enum PagingRequest.SourceType | Back End Documentations",
    "keywords": "Enum PagingRequest.SourceType Represents the source type. Namespace: IDX.Utilities.Models.PgSqlDataProcessor Assembly: IDX.Utilities.dll Syntax public enum PagingRequest.SourceType Remarks This property is used to specify the source of the data, either a table or a stored procedure. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table }; Fields Name Description StoreProcedure Represents a stored procedure as the data source. Table Represents a table as the data source. Extension Methods ObjectExtensions.CastToBoolean(object, bool) ObjectExtensions.CastToDateTime(object, DateTime) ObjectExtensions.CastToDecimal(object, decimal) ObjectExtensions.CastToDouble(object, double) ObjectExtensions.CastToInteger(object, int) ObjectExtensions.CastToString(object, string) Common.EnsureNotNull(object, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.TargetName.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.TargetName.html",
    "title": "Property TargetName | Back End Documentations",
    "keywords": "Property TargetName TargetName Gets or sets the target name. Declaration [Required(ErrorMessage = \"Target (Table/Store Procedure/Store Function) name is required\")] public string? TargetName { get; set; } Property Value Type Description string Remarks This property is used to specify the target name of the data source. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table, Schema = \"public\", TargetName = \"mytable\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.WhereClause.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.WhereClause.html",
    "title": "Property WhereClause | Back End Documentations",
    "keywords": "Property WhereClause WhereClause Gets or sets the WHERE clause for filtering data. Declaration public string? WhereClause { get; set; } Property Value Type Description string Remarks This property is used to specify the WHERE clause for filtering data. Examples var pagingRequest = new PagingRequest { Source = PagingRequest.SourceType.Table, Schema = \"public\", TargetName = \"mytable\", WhereClause = \"age > 18\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.PagingRequest.html",
    "title": "Class PagingRequest | Back End Documentations",
    "keywords": "Class PagingRequest Represents a paging request for a data processor. Inheritance object PagingRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.PgSqlDataProcessor Assembly: IDX.Utilities.dll Syntax public class PagingRequest Examples var pagingRequest = new PagingRequest { BTRequest = new BTRequest { Page = 1, Limit = 10, Sort = \"id\", Order = BTRequest.BTOrderType.Asc }, Fields = new[] { \"id\", \"name\", \"age\" }, Source = PagingRequest.SourceType.Table }; var helper = new PgSqlHelper(\"Server=myServerAddress;Port=5432;Database=myDataBase;User Id=myUsername;Password=myPassword;\"); await helper.BsTableDataAsync( pagingRequest, (result) => { foreach (var row in result.Rows) { Console.WriteLine(row); } } ); Properties Name Description BTRequest Gets or sets the Bootstrap Table request object. ExcludedSearchFields Gets or sets the excluded search fields. Fields Gets or sets the fields to be fetched. SPParameters Gets or sets the stored procedure parameters. Schema Gets or sets the schema name. Source Gets or sets the source type of the data. TargetName Gets or sets the target name. WhereClause Gets or sets the WHERE clause for filtering data. Extension Methods Common.EnsureModel(PagingRequest) ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.Parameters.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.Parameters.html",
    "title": "Property Parameters | Back End Documentations",
    "keywords": "Property Parameters Parameters Gets or sets the stored procedure parameters. Declaration public SPParameter[]? Parameters { get; set; } Property Value Type Description SPParameter[] Examples var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"get_data\", Parameters = new[] { new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer }, new SPParameter { Name = \"name\", Value = \"John Doe\", DataType = NpgsqlDbType.Varchar } } };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.SPName.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.SPName.html",
    "title": "Property SPName | Back End Documentations",
    "keywords": "Property SPName SPName Gets or sets the stored procedure name. Declaration [Required(ErrorMessage = \"SPName is required\")] public string? SPName { get; set; } Property Value Type Description string Examples var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"get_data\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.Schema.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.Schema.html",
    "title": "Property Schema | Back End Documentations",
    "keywords": "Property Schema Schema Gets or sets the schema name. Declaration [Required(ErrorMessage = \"Schema is required\")] public string? Schema { get; set; } Property Value Type Description string Examples var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"get_data\", Parameters = new[] { new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer } } };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPCallInfo.html",
    "title": "Class SPCallInfo | Back End Documentations",
    "keywords": "Class SPCallInfo Represents information about a stored procedure call. Inheritance object SPCallInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.PgSqlDataProcessor Assembly: IDX.Utilities.dll Syntax public class SPCallInfo Examples var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"get_data\", Parameters = new[] { new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer } } }; Properties Name Description Parameters Gets or sets the stored procedure parameters. SPName Gets or sets the stored procedure name. Schema Gets or sets the schema name. Extension Methods Common.EnsureModel(SPCallInfo) ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.DataType.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.DataType.html",
    "title": "Property DataType | Back End Documentations",
    "keywords": "Property DataType DataType Gets or sets the data type of the parameter. Declaration public NpgsqlDbType DataType { get; set; } Property Value Type Description NpgsqlDbType Examples var spParam = new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.Name.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.Name.html",
    "title": "Property Name | Back End Documentations",
    "keywords": "Property Name Name Gets or sets the name of the parameter. Declaration [Required(ErrorMessage = \"Name is required\")] public required string Name { get; set; } Property Value Type Description string Examples var spParam = new SPParameter { Name = \"id\" };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.Value.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.Value.html",
    "title": "Property Value | Back End Documentations",
    "keywords": "Property Value Value Gets or sets the value of the parameter. Declaration [Required(ErrorMessage = \"Value is required\")] public dynamic? Value { get; set; } Property Value Type Description dynamic Examples var spParam = new SPParameter { Value = 1 };"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.With.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.With.html",
    "title": "Method With | Back End Documentations",
    "keywords": "Method With With(string, dynamic?, NpgsqlDbType) Sets the name, value, and data type of the parameter. Declaration public virtual SPParameter With(string name, dynamic? value, NpgsqlDbType dataType) Parameters Type Name Description string name The name of the parameter. Required. dynamic value The value of the parameter. Required. NpgsqlDbType dataType The data type of the parameter. Returns Type Description SPParameter The modified SPParameter instance. Examples var spParam = new SPParameter(); spParam = spParam.With(\"id\", 1, NpgsqlDbType.Integer); With(string, dynamic?) Sets the name and value of the parameter and returns the updated parameter. Declaration public virtual SPParameter With(string name, dynamic? value) Parameters Type Name Description string name The name of the parameter. Required. dynamic value The value of the parameter. Required. Returns Type Description SPParameter The updated parameter. Examples var spParam = new SPParameter(); spParam = spParam.With(\"id\", 1); With(string) Sets the name of the parameter. Declaration public virtual SPParameter With(string name) Parameters Type Name Description string name The name of the parameter. Returns Type Description SPParameter The instance of the parameter. Examples var spParam = new SPParameter(); spParam = spParam.WithName(\"id\"); Exceptions Type Condition ArgumentNullException Thrown when the name is null or empty. With(dynamic?) Sets the value of the parameter and returns the modified parameter. Declaration public virtual SPParameter With(dynamic? value) Parameters Type Name Description dynamic value The value to set. Returns Type Description SPParameter The modified parameter. Examples var spParam = new SPParameter(); spParam = spParam.WithValue(1); With(NpgsqlDbType) Sets the data type of the parameter and returns the modified parameter. Declaration public virtual SPParameter With(NpgsqlDbType dataType) Parameters Type Name Description NpgsqlDbType dataType The NpgsqlDbType value representing the data type of the parameter. Returns Type Description SPParameter The modified SPParameter object. Examples var spParam = new SPParameter(); spParam = spParam.WithDataType(NpgsqlDbType.Integer);"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.SPParameter.html",
    "title": "Class SPParameter | Back End Documentations",
    "keywords": "Class SPParameter Represents a stored procedure parameter. Inheritance object SPParameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Models.PgSqlDataProcessor Assembly: IDX.Utilities.dll Syntax public class SPParameter Examples var spParam = new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer }; Properties Name Description DataType Gets or sets the data type of the parameter. Name Gets or sets the name of the parameter. Value Gets or sets the value of the parameter. Methods Name Description With(NpgsqlDbType) Sets the data type of the parameter and returns the modified parameter. With(dynamic?) Sets the value of the parameter and returns the modified parameter. With(string) Sets the name of the parameter. With(string, dynamic?) Sets the name and value of the parameter and returns the updated parameter. With(string, dynamic?, NpgsqlDbType) Sets the name, value, and data type of the parameter. Extension Methods Common.EnsureModel(SPParameter) ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.PgSqlDataProcessor.html",
    "title": "Namespace IDX.Utilities.Models.PgSqlDataProcessor | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Models.PgSqlDataProcessor Classes PagingRequest Represents a paging request for a data processor. SPCallInfo Represents information about a stored procedure call. SPParameter Represents a stored procedure parameter. Enums PagingRequest.SourceType Represents the source type."
  },
  "api/idc.utility/IDX.Utilities.Models.html": {
    "href": "api/idc.utility/IDX.Utilities.Models.html",
    "title": "Namespace IDX.Utilities.Models | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Models Namespaces IDX.Utilities.Models.API IDX.Utilities.Models.BootstrapTable IDX.Utilities.Models.PgSqlDataProcessor Classes CommonConnectionString Represents a connection string for a database. CouchBaseConnectionString Represents the connection string details for a Couchbase server."
  },
  "api/idc.utility/IDX.Utilities.SystemLogging.-ctor.html": {
    "href": "api/idc.utility/IDX.Utilities.SystemLogging.-ctor.html",
    "title": "Constructor SystemLogging | Back End Documentations",
    "keywords": "Constructor SystemLogging SystemLogging(string, string) Initializes a new instance of the SystemLogging class. Declaration public SystemLogging(string logSource, string logFilePath) Parameters Type Name Description string logSource The source of the log. string logFilePath The file path where the log is saved. Examples var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging.WriteLog(\"Hello World!\");"
  },
  "api/idc.utility/IDX.Utilities.SystemLogging.With.html": {
    "href": "api/idc.utility/IDX.Utilities.SystemLogging.With.html",
    "title": "Method With | Back End Documentations",
    "keywords": "Method With With(LogLevel) Sets the minimum log level for system logging. Declaration public SystemLogging With(LogLevel minimumLevel) Parameters Type Name Description LogLevel minimumLevel The minimum log level. Returns Type Description SystemLogging A reference to the current instance of SystemLogging. Examples var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging = systemLogging.With(LogLevel.Warning); With(bool) Sets whether to write logs to the system. Declaration public SystemLogging With(bool writeToSystem) Parameters Type Name Description bool writeToSystem True if logs should be written to the system; otherwise, false. Returns Type Description SystemLogging A reference to the updated SystemLogging object. Examples var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging = systemLogging.With(writeToSystem: false); With(LogLevel?, bool?) Sets the minimum log level and whether to write logs to the system. Declaration public SystemLogging With(LogLevel? minimumLevel, bool? writeToSystem) Parameters Type Name Description LogLevel? minimumLevel The minimum log level. bool? writeToSystem Whether to write logs to the system. Returns Type Description SystemLogging The updated SystemLogging instance. Examples var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging = systemLogging.With(LogLevel.Warning, true);"
  },
  "api/idc.utility/IDX.Utilities.SystemLogging.WriteLog.html": {
    "href": "api/idc.utility/IDX.Utilities.SystemLogging.WriteLog.html",
    "title": "Method WriteLog | Back End Documentations",
    "keywords": "Method WriteLog WriteLog(Exception, LogLevel) Writes the log message for the given exception with the specified log level. Declaration public void WriteLog(Exception exception, LogLevel logLevel = LogLevel.Information) Parameters Type Name Description Exception exception The exception to log. LogLevel logLevel The log level (default is Information). Examples var exception = new Exception(\"The operation failed.\"); var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging.WriteLog(exception); WriteLog(string, LogLevel) Writes a log message with the specified log level. Declaration public void WriteLog(string message, LogLevel logLevel = LogLevel.Information) Parameters Type Name Description string message The message to be logged. LogLevel logLevel The log level of the message (default is LogLevel.Information). Examples var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging.WriteLog(\"Hello World!\");"
  },
  "api/idc.utility/IDX.Utilities.SystemLogging.html": {
    "href": "api/idc.utility/IDX.Utilities.SystemLogging.html",
    "title": "Class SystemLogging | Back End Documentations",
    "keywords": "Class SystemLogging Initializes a new instance of the SystemLogging class. Inheritance object SystemLogging Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities Assembly: IDX.Utilities.dll Syntax public class SystemLogging Examples var systemLogging = new SystemLogging(\"MyApp\", \"/var/log/myapp.log\"); systemLogging.WriteLog(\"Hello World!\"); Constructors Name Description SystemLogging(string, string) Initializes a new instance of the SystemLogging class. Methods Name Description With(LogLevel) Sets the minimum log level for system logging. With(bool) Sets whether to write logs to the system. With(LogLevel?, bool?) Sets the minimum log level and whether to write logs to the system. WriteLog(Exception, LogLevel) Writes the log message for the given exception with the specified log level. WriteLog(string, LogLevel) Writes a log message with the specified log level. Extension Methods ObjectExtensions.CastToBoolean(object?, bool) ObjectExtensions.CastToDateTime(object?, DateTime) ObjectExtensions.CastToDecimal(object?, decimal) ObjectExtensions.CastToDouble(object?, double) ObjectExtensions.CastToInteger(object?, int) ObjectExtensions.CastToString(object?, string) Common.EnsureNotNull(object?, string, string)"
  },
  "api/idc.utility/IDX.Utilities.Validations.Common.EnsureFilePath.html": {
    "href": "api/idc.utility/IDX.Utilities.Validations.Common.EnsureFilePath.html",
    "title": "Method EnsureFilePath | Back End Documentations",
    "keywords": "Method EnsureFilePath EnsureFilePath(string, string) Ensures that the file exists at the specified file path. Declaration public static void EnsureFilePath(this string filePath, string onNotFoundMessage = \"File cannot be found at the address: '{filePath}'.\") Parameters Type Name Description string filePath The path of the file to check. string onNotFoundMessage The message to display if the file is not found. The default message is \"File cannot be found at the address: '{filePath}'\". Examples var filePath = \"C:/my/path/to/file.txt\"; filePath.EnsureFilePath(); Exceptions Type Condition FileNotFoundException Thrown if the file does not exist."
  },
  "api/idc.utility/IDX.Utilities.Validations.Common.EnsureModel.html": {
    "href": "api/idc.utility/IDX.Utilities.Validations.Common.EnsureModel.html",
    "title": "Method EnsureModel | Back End Documentations",
    "keywords": "Method EnsureModel EnsureModel(CommonConnectionString) Ensures that the connection string is valid. Declaration public static void EnsureModel(this CommonConnectionString connectionString) Parameters Type Name Description CommonConnectionString connectionString The connection string to validate. Examples var connectionString = new CommonConnectionString { Host = \"localhost\", Username = \"myuser\", Password = \"mypassword\", Database = \"mydb\", IntegratedSecurity = false, Pooling = true, MinPoolSize = 1, MaxPoolSize = 10 }; connectionString.EnsureModel(); Exceptions Type Condition ArgumentException Thrown if the connection string is not valid. EnsureModel(PagingRequest) Ensures that the paging request model is valid, throwing an exception if it is not. Declaration public static void EnsureModel(this PagingRequest pagingRequest) Parameters Type Name Description PagingRequest pagingRequest The paging request model to validate. Examples var pagingRequest = new PagingRequest { BTRequest = new BTRequest { Page = 1, Limit = 10, Sort = \"id\", Order = BTRequest.BTOrderType.Asc }, Fields = new[] { \"id\", \"name\", \"age\" }, Source = PagingRequest.SourceType.Table }; pagingRequest.EnsureModel(); Exceptions Type Condition ArgumentException Thrown if the paging request model fails validation. EnsureModel(Encryptor) Ensures that the encryptor object is valid, throwing an exception if it is not. Declaration public static void EnsureModel(this Encryptor encryptor) Parameters Type Name Description Encryptor encryptor The encryptor object to validate. Examples Encryptor encryptor = new Encryptor(); encryptor.EnsureModel(); Exceptions Type Condition ArgumentException Thrown if the encryptor object fails validation. EnsureModel(SPCallInfo) Ensures the validity of the SPCallInfo object. Declaration public static void EnsureModel(this SPCallInfo spCallInfo) Parameters Type Name Description SPCallInfo spCallInfo The SPCallInfo object to validate. Examples var spCallInfo = new SPCallInfo { Schema = \"public\", SPName = \"get_data\", Parameters = new[] { new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer } } }; spCallInfo.EnsureModel(); Exceptions Type Condition ArgumentException Thrown when the SPCallInfo object is invalid. EnsureModel(SPParameter) Ensures that the specified stored procedure parameter is valid, throwing an exception if it is not. Declaration public static void EnsureModel(this SPParameter spParameter) Parameters Type Name Description SPParameter spParameter The stored procedure parameter to validate. Examples var spParam = new SPParameter { Name = \"id\", Value = 1, DataType = NpgsqlDbType.Integer }; spParam.EnsureModel(); Exceptions Type Condition ArgumentException Thrown if the stored procedure parameter fails validation. EnsureModel(CouchBaseConnectionString) Ensures the model for the CouchBase connection string. Declaration public static void EnsureModel(this CouchBaseConnectionString connectionString) Parameters Type Name Description CouchBaseConnectionString connectionString The CouchBase connection string. Examples var connectionString = new CouchBaseConnectionString { Host = \"localhost\", Username = \"Administrator\", Password = \"password\", }; connectionString.EnsureModel(); Exceptions Type Condition ArgumentException Thrown if the model validation fails."
  },
  "api/idc.utility/IDX.Utilities.Validations.Common.EnsureNotNull.html": {
    "href": "api/idc.utility/IDX.Utilities.Validations.Common.EnsureNotNull.html",
    "title": "Method EnsureNotNull | Back End Documentations",
    "keywords": "Method EnsureNotNull EnsureNotNull(object?, string, string) Ensures that the specified argument is not null. Declaration public static void EnsureNotNull(this object? arg, string argName, string onNullMessage = \"Parameter '{argName}' can not be null.\") Parameters Type Name Description object arg The argument value. string argName The name of the argument. string onNullMessage The message to display if the argument is null. The default message is \"Parameter '{argName}' can not be null.\" Examples var value = null; value.EnsureNotNull(nameof(value)); Exceptions Type Condition Exception Thrown when the argument is null."
  },
  "api/idc.utility/IDX.Utilities.Validations.Common.EnsureNotNullOrWhiteSpace.html": {
    "href": "api/idc.utility/IDX.Utilities.Validations.Common.EnsureNotNullOrWhiteSpace.html",
    "title": "Method EnsureNotNullOrWhiteSpace | Back End Documentations",
    "keywords": "Method EnsureNotNullOrWhiteSpace EnsureNotNullOrWhiteSpace(string?, string, string) Ensures that the specified argument is not null or white space. Declaration public static void EnsureNotNullOrWhiteSpace(this string? arg, string argName, string onNullMessage = \"Parameter '{argName}' can not be null, empty, or constains only white space.\") Parameters Type Name Description string arg The argument value. string argName The name of the argument. string onNullMessage The message to display if the argument is null or white space. The default message is \"Parameter '{argName}' can not be null, empty, or constains only white space.\" Examples var value = \"\"; value.EnsureNotNullOrWhiteSpace(nameof(value)); Exceptions Type Condition Exception Thrown when the argument is null or white space."
  },
  "api/idc.utility/IDX.Utilities.Validations.Common.html": {
    "href": "api/idc.utility/IDX.Utilities.Validations.Common.html",
    "title": "Class Common | Back End Documentations",
    "keywords": "Class Common Provides common validation methods. Inheritance object Common Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: IDX.Utilities.Validations Assembly: IDX.Utilities.dll Syntax public static class Common Examples var value = \"\"; value.EnsureNotNullOrWhiteSpace(nameof(value)); Methods Name Description EnsureFilePath(string, string) Ensures that the file exists at the specified file path. EnsureModel(Encryptor) Ensures that the encryptor object is valid, throwing an exception if it is not. EnsureModel(CommonConnectionString) Ensures that the connection string is valid. EnsureModel(CouchBaseConnectionString) Ensures the model for the CouchBase connection string. EnsureModel(PagingRequest) Ensures that the paging request model is valid, throwing an exception if it is not. EnsureModel(SPCallInfo) Ensures the validity of the SPCallInfo object. EnsureModel(SPParameter) Ensures that the specified stored procedure parameter is valid, throwing an exception if it is not. EnsureNotNull(object?, string, string) Ensures that the specified argument is not null. EnsureNotNullOrWhiteSpace(string?, string, string) Ensures that the specified argument is not null or white space."
  },
  "api/idc.utility/IDX.Utilities.Validations.html": {
    "href": "api/idc.utility/IDX.Utilities.Validations.html",
    "title": "Namespace IDX.Utilities.Validations | Back End Documentations",
    "keywords": "Namespace IDX.Utilities.Validations Classes Common Provides common validation methods."
  },
  "api/idc.utility/IDX.Utilities.html": {
    "href": "api/idc.utility/IDX.Utilities.html",
    "title": "Namespace IDX.Utilities | Back End Documentations",
    "keywords": "Namespace IDX.Utilities Namespaces IDX.Utilities.DataProcessor IDX.Utilities.Delegator IDX.Utilities.Extensions IDX.Utilities.Models IDX.Utilities.Validations Classes Common Provides common utility methods. Encryptor Represents an encryptor class. MemoryCacheService Initializes a new instance of the MemoryCacheService class. SystemLogging Initializes a new instance of the SystemLogging class."
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting Started | Back End Documentations",
    "keywords": "Getting Started"
  },
  "articles/introduction.html": {
    "href": "articles/introduction.html",
    "title": "Introduction | Back End Documentations",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "ID/X Technical Documentation | Back End Documentations",
    "keywords": "ID/X Technical Documentation On this landing page, you can find information and related technical documentation Technical Documentation Related to API Rest API Technical Documentation Technical Documentation of Boilerplate Configuration for New Service And, integration of technical documents on new API."
  },
  "restapi/petstore.html": {
    "href": "restapi/petstore.html",
    "title": "Swagger Petstore | Back End Documentations",
    "keywords": "Swagger Petstore pet Everything about your Pets uploadFile uploads an image Request POST /pet/{petId}/uploadImage Parameters Name Type Default Notes *petId ID of pet to update additionalMetadata Additional data to pass to server file file to upload Responses Status Code Type Description Samples 200 ApiResponse successful operation addPet Add a new pet to the store Request POST /pet Parameters Name Type Default Notes *body Pet Pet object that needs to be added to the store Responses Status Code Type Description Samples 405 Invalid input updatePet Update an existing pet Request PUT /pet Parameters Name Type Default Notes *body Pet Pet object that needs to be added to the store Responses Status Code Type Description Samples 400 Invalid ID supplied 404 Pet not found 405 Validation exception findPetsByStatus Finds Pets by status Multiple status values can be provided with comma separated strings Request GET /pet/findByStatus?status Parameters Name Type Default Notes *status Status values that need to be considered for filter Responses Status Code Type Description Samples 200 Pet[] successful operation 400 Invalid status value findPetsByTags Finds Pets by tags Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. Request GET /pet/findByTags?tags Parameters Name Type Default Notes *tags Tags to filter by Responses Status Code Type Description Samples 200 Pet[] successful operation 400 Invalid tag value getPetById Find pet by ID Returns a single pet Request GET /pet/{petId} Parameters Name Type Default Notes *petId ID of pet to return Responses Status Code Type Description Samples 200 Pet successful operation 400 Invalid ID supplied 404 Pet not found updatePetWithForm Updates a pet in the store with form data Request POST /pet/{petId} Parameters Name Type Default Notes *petId ID of pet that needs to be updated name Updated name of the pet status Updated status of the pet Responses Status Code Type Description Samples 405 Invalid input deletePet Deletes a pet Request DELETE /pet/{petId} Parameters Name Type Default Notes api_key *petId Pet id to delete Responses Status Code Type Description Samples 400 Invalid ID supplied 404 Pet not found store Access to Petstore orders getInventory Returns pet inventories by status Returns a map of status codes to quantities Request GET /store/inventory Responses Status Code Type Description Samples 200 object successful operation placeOrder Place an order for a pet Request POST /store/order Parameters Name Type Default Notes *body Order order placed for purchasing the pet Responses Status Code Type Description Samples 200 Order successful operation 400 Invalid Order getOrderById Find purchase order by ID For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions Request GET /store/order/{orderId} Parameters Name Type Default Notes *orderId ID of pet that needs to be fetched Responses Status Code Type Description Samples 200 Order successful operation 400 Invalid ID supplied 404 Order not found deleteOrder Delete purchase order by ID For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors Request DELETE /store/order/{orderId} Parameters Name Type Default Notes *orderId ID of the order that needs to be deleted Responses Status Code Type Description Samples 400 Invalid ID supplied 404 Order not found user Operations about user createUsersWithListInput Creates list of users with given input array Request POST /user/createWithList Parameters Name Type Default Notes *body User[] List of user object Responses Status Code Type Description Samples default successful operation getUserByName Get user by user name Request GET /user/{username} Parameters Name Type Default Notes *username The name that needs to be fetched. Use user1 for testing. Responses Status Code Type Description Samples 200 User successful operation 400 Invalid username supplied 404 User not found updateUser Updated user This can only be done by the logged in user. Request PUT /user/{username} Parameters Name Type Default Notes *username name that need to be updated *body User Updated user object Responses Status Code Type Description Samples 400 Invalid user supplied 404 User not found deleteUser Delete user This can only be done by the logged in user. Request DELETE /user/{username} Parameters Name Type Default Notes *username The name that needs to be deleted Responses Status Code Type Description Samples 400 Invalid username supplied 404 User not found loginUser Logs user into the system Request GET /user/login?username&password Parameters Name Type Default Notes *username The user name for login *password The password for login in clear text Responses Status Code Type Description Samples 200 string successful operation 400 Invalid username/password supplied logoutUser Logs out current logged in user session Request GET /user/logout Responses Status Code Type Description Samples default successful operation createUsersWithArrayInput Creates list of users with given input array Request POST /user/createWithArray Parameters Name Type Default Notes *body User[] List of user object Responses Status Code Type Description Samples default successful operation createUser Create user This can only be done by the logged in user. Request POST /user Parameters Name Type Default Notes *body User Created user object Responses Status Code Type Description Samples default successful operation Definitions ApiResponse Name Type Notes code integer (int32) type string message string Pet Name Type Notes id integer (int64) category Category[] name string photoUrls array tags Tag[] status string pet status in the store Category Name Type Notes id integer (int64) name string Tag Name Type Notes id integer (int64) name string Order Name Type Notes id integer (int64) petId integer (int64) quantity integer (int32) shipDate string (date-time) status string Order Status complete boolean User Name Type Notes id integer (int64) username string firstName string lastName string email string password string phone string userStatus integer (int32) User Status"
  }
}